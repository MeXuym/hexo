{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar1.gif","path":"images/avatar1.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1462394086000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1462394086000},{"_id":"themes/next/.gitignore","hash":"efec790f5b7a0256763e1cc08f12c4f0aff509f6","modified":1462394086000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1462394086000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1462394086000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1462394086000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1462394086000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1462394086000},{"_id":"themes/next/_config.yml","hash":"28effba502a57a0efff7bd82b316ee2635ed765b","modified":1487068374000},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1462394086000},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1462394086000},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1462394086000},{"_id":"source/_posts/XYMGuideView.md","hash":"95e76324ef6d8e84f6d177cf7d5dce5777021808","modified":1487150373000},{"_id":"source/_posts/XYMScan.md","hash":"36de502fd4e63493fd403e37e65c89b667ead38e","modified":1487149557000},{"_id":"source/_posts/hello-world.md","hash":"d78c7f240461979620d69b91bab1915963bdbdda","modified":1487148023000},{"_id":"source/_posts/实现如masonry的链式语法.md","hash":"e281f2e0f55d4e2b15387c79bd6749a055e00f40","modified":1487150820000},{"_id":"source/_posts/pushAnimation.md","hash":"1f7e198d9a1ce27076fe91ddb4ffaefad8d3d8e3","modified":1487214632000},{"_id":"source/_posts/非全部导航栏显示的导航动画问题.md","hash":"1a2bb77c4c2e0ab9ca94fc5af10751eaccc9f476","modified":1487215099000},{"_id":"source/categories/index.md","hash":"2fc6607c63615e880a18630015cc76e6f77cea19","modified":1487143179000},{"_id":"source/tags/index.md","hash":"f3408f47ce2dbbdb92a2b75864f2d7d830cddc83","modified":1487142950000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1462394086000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1462394086000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1462394086000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1462394086000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1462394086000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1462394086000},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1462394086000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1462394086000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1462394086000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1462394086000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1462394086000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1462394086000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1462394086000},{"_id":"themes/next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1462394086000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1462394086000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1462394086000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1462394086000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1462394086000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1462394086000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1462394086000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1462394086000},{"_id":"themes/next/test/.jshintrc","hash":"096ed6df627373edd820f24d46b8baf528dee61d","modified":1462394086000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1462394086000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1462394086000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462394086000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1462394086000},{"_id":"themes/next/layout/_macro/post.swig","hash":"1ca03011bed92614832b1343b65be92183957dc5","modified":1462394086000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1462394086000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b883289054ee54a374caad5d4883591beb94bd8b","modified":1462394086000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"85327c2174d09c6d69c9033592e6c8f7eb7ac3ba","modified":1462394086000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"82a9bc2ba60ce68419128ff60624bd74b15dfb78","modified":1462394086000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1462394086000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"0ce71d8322ea7dea82d9371fa2fe13949aa870e3","modified":1462394086000},{"_id":"themes/next/layout/_partials/head.swig","hash":"f83b1c55bedd2c1a3eb734c72c6997795a4e5f99","modified":1462394086000},{"_id":"themes/next/layout/_partials/header.swig","hash":"963a765dc00e6ac43cfc53ffaf5725eb854cf95e","modified":1462394086000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1462394086000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1462394086000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1462394086000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1462394086000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1462394086000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1462394086000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1462394086000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1462394086000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1462394086000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1462394086000},{"_id":"themes/next/source/images/avatar.jpg","hash":"ee4860a2bebce7fbf5b2e43b4905921727dfae13","modified":1487140544000},{"_id":"themes/next/source/images/avatar1.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1462394086000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1462394086000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1462394086000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1462394086000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1462394086000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1462394086000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1462394086000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1462394086000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1462394086000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1462394086000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1462394086000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1462394086000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1462394086000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462394086000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462394086000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462394086000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462394086000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462394086000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462394086000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462394086000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1462394086000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1462394086000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1462394086000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1462394086000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1462394086000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1462394086000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1462394086000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1462394086000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1462394086000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"069bb17fb1db3bc7c85c88efa3ed94ab6becbe2c","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"1561bd0c107d725252c6d746e9ac177fc18f93bf","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1462394086000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1462394086000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1462394086000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1462394086000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1462394086000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1462394086000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1462394086000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1462394086000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1462394086000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1462394086000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1462394086000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1462394086000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1462394086000},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1462394086000},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1462394086000},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1462394086000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1462394086000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1462394086000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1462394086000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1462394086000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1462394086000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1462394086000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1462394086000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1462394086000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1462394086000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1462394086000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1462394086000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1462394086000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1462394086000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1462394086000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1462394086000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1462394086000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1462394086000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1462394086000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1462394086000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1462394086000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1462394086000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"44e761721e8ad787ef571a3cc57bbc12d318a2a3","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"334176d838ee528e58468d8bc74ff3a6d3f25b2b","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"8c7af79407d223486fba72b8150fe045a553bf70","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1462394086000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1462394086000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1462394086000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1462394086000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1462394086000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1462394086000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1462394086000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1462394086000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1462394086000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1462394086000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1462394086000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1462394086000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1462394086000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1462394086000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1462394086000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1462394086000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1462394086000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1462394086000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1462394086000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1462394086000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1462394086000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1462394086000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1462394086000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1462394086000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1462394086000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1462394086000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1462394086000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1462394086000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1462394086000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1462394086000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1462394086000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1462394086000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1462394086000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1462394086000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1462394086000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1462394086000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1462394086000},{"_id":"public/categories/index.html","hash":"33f7c93b458f2940ff1e7397b7dff45be37a8057","modified":1487216265611},{"_id":"public/tags/index.html","hash":"e3411bb83699d5a489385fb2fcbb30ef9a849d9e","modified":1487216265611},{"_id":"public/2016/11/07/XYMScan/index.html","hash":"eb83d8252caa5c55d70feb93cbb62e3413ec56d4","modified":1487216265612},{"_id":"public/2016/11/04/hello-world/index.html","hash":"92531fe96f0af951fa5efe3b6de30b1dbc22c081","modified":1487216265612},{"_id":"public/archives/index.html","hash":"1aba051fe8d2e8381b8cab55ef8d85fbd2ca1b1d","modified":1487216265612},{"_id":"public/archives/2016/index.html","hash":"90a30a98d2a9177eea88715edbd4ea122a1dcf11","modified":1487216265612},{"_id":"public/archives/2016/11/index.html","hash":"a81092e7ee152523757a28a25b2d095c9701e74a","modified":1487216265612},{"_id":"public/archives/2016/12/index.html","hash":"8f6c966089a2c61b0d75deb3f34cf78924139eef","modified":1487216265612},{"_id":"public/categories/iOS/index.html","hash":"577bc7bef6acc602a83b66f295bc1477ee9b4f8f","modified":1487216265612},{"_id":"public/categories/食/index.html","hash":"9fcfc4bd1be0fdc17402e5c98ad9940d7e4dad27","modified":1487216265612},{"_id":"public/tags/轮子/index.html","hash":"944ec3de747c98b0b0c292ecbecef413374332ac","modified":1487216265612},{"_id":"public/tags/炒/index.html","hash":"a122e5dae7faf639839211c1c924ce7c940f1767","modified":1487216265612},{"_id":"public/tags/动画/index.html","hash":"0ae1606bae46cee3be1326fc5d4af0448a7f1aa8","modified":1487216265612},{"_id":"public/2016/12/08/非全部导航栏显示的导航动画问题/index.html","hash":"cb8bf513a835eac2a56aadab5cb0cbc949718004","modified":1487216265612},{"_id":"public/2016/12/01/pushAnimation/index.html","hash":"e9d138c435ca7ed1869c582585c788ca12d3cd0e","modified":1487216265612},{"_id":"public/2016/11/24/实现如masonry的链式语法/index.html","hash":"5d63ba58b10e4f55793c02f8bd94f01f59ca9b9a","modified":1487216265612},{"_id":"public/2016/11/14/XYMGuideView/index.html","hash":"f00b4e9e4757fde9651750ae8b9e88faa1df00b4","modified":1487216265612},{"_id":"public/index.html","hash":"6e16c5dcb8f952a6bf8bf17df5b9f93c80034722","modified":1487216265612},{"_id":"public/images/avatar1.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1487216265622},{"_id":"public/images/avatar.jpg","hash":"ee4860a2bebce7fbf5b2e43b4905921727dfae13","modified":1487216265622},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1487216265623},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1487216265623},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1487216265623},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1487216265623},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1487216265623},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1487216265623},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1487216265623},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1487216265623},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1487216265623},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1487216265623},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1487216265623},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1487216265623},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1487216265623},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1487216265623},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1487216265624},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1487216265624},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1487216265624},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1487216265624},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1487216265625},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1487216265625},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1487216265625},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1487216265625},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1487216265625},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1487216266277},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1487216266288},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1487216266290},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1487216266297},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1487216266297},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1487216266297},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1487216266297},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1487216266297},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1487216266297},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1487216266297},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1487216266297},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1487216266297},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1487216266297},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1487216266297},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1487216266297},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1487216266297},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1487216266297},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1487216266297},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1487216266297},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1487216266297},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1487216266298},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1487216266298},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1487216266298},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1487216266298},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1487216266298},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1487216266298},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1487216266298},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1487216266298},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1487216266298},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1487216266298},{"_id":"public/css/main.css","hash":"ca89453380495f7ef02051d333c08c8542bdaf25","modified":1487216266298},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1487216266298},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1487216266298},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1487216266298},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1487216266298},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1487216266298},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1487216266298},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1487216266298},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1487216266298},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1487216266298},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1487216266298},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1487216266319}],"Category":[{"name":"iOS","_id":"ciz7u5y0w0003sdsar4pnjrbp"},{"name":"食","_id":"ciz7u5y1b000esdsa6z1eh769"}],"Data":[],"Page":[{"title":"categories","date":"2017-02-15T07:19:04.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-02-15 15:19:04\ntype: \"categories\"\n---\n","updated":"2017-02-15T07:19:39.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ciz7u5y0r0001sdsaq5har081","content":"","excerpt":"","more":""},{"title":"Tagcloud","date":"2017-02-15T07:14:39.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: Tagcloud\ndate: 2017-02-15 15:14:39\ntype: \"tags\"\n---\n","updated":"2017-02-15T07:15:50.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ciz7u5y51000ssdsaj3sbiil5","content":"","excerpt":"","more":""}],"Post":[{"title":"XYMGuideView","date":"2016-11-14T15:47:44.000Z","_content":"首次启动打开某个页面的时候弹出的新手引导蒙版，再次进来这个页面后不会再提示。\n\n![XYMGuideView](https://raw.githubusercontent.com/MeXuym/hexoSource/master/_posts/XYMGuideView/XYMGuideView.gif)\n\n## 使用\n这其实是一个UIView，在你需要新手引导或者新功能引导的页面导入头文件\n```\n#import \"XYMGuideView.h\"\n```\n<!--more-->\n\n### 创建对象\n```\n//直接创建不用给它frame(默认就是覆盖整个屏幕)\nXYMGuideView *guideView = [[XYMGuideView alloc]init];\n```\n### 设置标识\n设置当前这个引导层的名字标识（一个项目中可能在不同的页面，会用到多个引导层，用这个标识区分开）\n```\nguideView.guideName = @\"hello\";\n```\n\n### 设置需要焦点区域和引导信息View\n设置引导用户关注的区域，提供两种类型，根据需要选择。 一种是圆形区域，调用对象方法 setCircularFocus ，传入GCPoint类型参数为圆形位置，radius为半径。\n```\n[guideView setCircularFocus:GCPoint radius:int];\n```\n提示引导信息的View 调用对象方法 addTipsView:传入一个你自己的自定义UIView(通常是一个UIImageView或者一个UILabel)\n```\n[guideView addTipsView:UIView];\n```\n### 实现代理方法\n\n如果想要在点击完引导层的时候时候做一些事情，这里提供一个代理方法，得到当前点击的引导层的名字标识\n\n#### 遵守协议\n```\n@interface RootViewController ()<XYMGuideViewDelegate>\n@end\n```\n\n#### 设置代理\n```\nguideView.delegate = self;\n@end\n```\n\n#### 实现代理方法\n拿到当前点击的引导层的标识\n```\n-(void)XYMGuideClick:(NSString*)guideName{\nNSLog(@\"%@\",guideName);\n}\n```\n\ngithub地址：[XYMGuideView](https://github.com/MeXuym/XYMGuideView)\n","source":"_posts/XYMGuideView.md","raw":"---\ntitle: XYMGuideView\ndate: 2016-11-14 23:47:44\ncategories: \"iOS\"\ntags: \"轮子\"\n---\n首次启动打开某个页面的时候弹出的新手引导蒙版，再次进来这个页面后不会再提示。\n\n![XYMGuideView](https://raw.githubusercontent.com/MeXuym/hexoSource/master/_posts/XYMGuideView/XYMGuideView.gif)\n\n## 使用\n这其实是一个UIView，在你需要新手引导或者新功能引导的页面导入头文件\n```\n#import \"XYMGuideView.h\"\n```\n<!--more-->\n\n### 创建对象\n```\n//直接创建不用给它frame(默认就是覆盖整个屏幕)\nXYMGuideView *guideView = [[XYMGuideView alloc]init];\n```\n### 设置标识\n设置当前这个引导层的名字标识（一个项目中可能在不同的页面，会用到多个引导层，用这个标识区分开）\n```\nguideView.guideName = @\"hello\";\n```\n\n### 设置需要焦点区域和引导信息View\n设置引导用户关注的区域，提供两种类型，根据需要选择。 一种是圆形区域，调用对象方法 setCircularFocus ，传入GCPoint类型参数为圆形位置，radius为半径。\n```\n[guideView setCircularFocus:GCPoint radius:int];\n```\n提示引导信息的View 调用对象方法 addTipsView:传入一个你自己的自定义UIView(通常是一个UIImageView或者一个UILabel)\n```\n[guideView addTipsView:UIView];\n```\n### 实现代理方法\n\n如果想要在点击完引导层的时候时候做一些事情，这里提供一个代理方法，得到当前点击的引导层的名字标识\n\n#### 遵守协议\n```\n@interface RootViewController ()<XYMGuideViewDelegate>\n@end\n```\n\n#### 设置代理\n```\nguideView.delegate = self;\n@end\n```\n\n#### 实现代理方法\n拿到当前点击的引导层的标识\n```\n-(void)XYMGuideClick:(NSString*)guideName{\nNSLog(@\"%@\",guideName);\n}\n```\n\ngithub地址：[XYMGuideView](https://github.com/MeXuym/XYMGuideView)\n","slug":"XYMGuideView","published":1,"updated":"2017-02-15T09:19:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz7u5y0n0000sdsabvvkxi08","content":"<p>首次启动打开某个页面的时候弹出的新手引导蒙版，再次进来这个页面后不会再提示。</p>\n<p><img src=\"https://raw.githubusercontent.com/MeXuym/hexoSource/master/_posts/XYMGuideView/XYMGuideView.gif\" alt=\"XYMGuideView\"></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>这其实是一个UIView，在你需要新手引导或者新功能引导的页面导入头文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &quot;XYMGuideView.h&quot;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h3 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//直接创建不用给它frame(默认就是覆盖整个屏幕)</div><div class=\"line\">XYMGuideView *guideView = [[XYMGuideView alloc]init];</div></pre></td></tr></table></figure>\n<h3 id=\"设置标识\"><a href=\"#设置标识\" class=\"headerlink\" title=\"设置标识\"></a>设置标识</h3><p>设置当前这个引导层的名字标识（一个项目中可能在不同的页面，会用到多个引导层，用这个标识区分开）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">guideView.guideName = @&quot;hello&quot;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"设置需要焦点区域和引导信息View\"><a href=\"#设置需要焦点区域和引导信息View\" class=\"headerlink\" title=\"设置需要焦点区域和引导信息View\"></a>设置需要焦点区域和引导信息View</h3><p>设置引导用户关注的区域，提供两种类型，根据需要选择。 一种是圆形区域，调用对象方法 setCircularFocus ，传入GCPoint类型参数为圆形位置，radius为半径。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[guideView setCircularFocus:GCPoint radius:int];</div></pre></td></tr></table></figure></p>\n<p>提示引导信息的View 调用对象方法 addTipsView:传入一个你自己的自定义UIView(通常是一个UIImageView或者一个UILabel)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[guideView addTipsView:UIView];</div></pre></td></tr></table></figure></p>\n<h3 id=\"实现代理方法\"><a href=\"#实现代理方法\" class=\"headerlink\" title=\"实现代理方法\"></a>实现代理方法</h3><p>如果想要在点击完引导层的时候时候做一些事情，这里提供一个代理方法，得到当前点击的引导层的名字标识</p>\n<h4 id=\"遵守协议\"><a href=\"#遵守协议\" class=\"headerlink\" title=\"遵守协议\"></a>遵守协议</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">@interface RootViewController ()&lt;XYMGuideViewDelegate&gt;</div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<h4 id=\"设置代理\"><a href=\"#设置代理\" class=\"headerlink\" title=\"设置代理\"></a>设置代理</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">guideView.delegate = self;</div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<h4 id=\"实现代理方法-1\"><a href=\"#实现代理方法-1\" class=\"headerlink\" title=\"实现代理方法\"></a>实现代理方法</h4><p>拿到当前点击的引导层的标识<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(void)XYMGuideClick:(NSString*)guideName&#123;</div><div class=\"line\">NSLog(@&quot;%@&quot;,guideName);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>github地址：<a href=\"https://github.com/MeXuym/XYMGuideView\" target=\"_blank\" rel=\"external\">XYMGuideView</a></p>\n","excerpt":"<p>首次启动打开某个页面的时候弹出的新手引导蒙版，再次进来这个页面后不会再提示。</p>\n<p><img src=\"https://raw.githubusercontent.com/MeXuym/hexoSource/master/_posts/XYMGuideView/XYMGuideView.gif\" alt=\"XYMGuideView\"></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>这其实是一个UIView，在你需要新手引导或者新功能引导的页面导入头文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &quot;XYMGuideView.h&quot;</div></pre></td></tr></table></figure></p>","more":"<h3 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//直接创建不用给它frame(默认就是覆盖整个屏幕)</div><div class=\"line\">XYMGuideView *guideView = [[XYMGuideView alloc]init];</div></pre></td></tr></table></figure>\n<h3 id=\"设置标识\"><a href=\"#设置标识\" class=\"headerlink\" title=\"设置标识\"></a>设置标识</h3><p>设置当前这个引导层的名字标识（一个项目中可能在不同的页面，会用到多个引导层，用这个标识区分开）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">guideView.guideName = @&quot;hello&quot;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"设置需要焦点区域和引导信息View\"><a href=\"#设置需要焦点区域和引导信息View\" class=\"headerlink\" title=\"设置需要焦点区域和引导信息View\"></a>设置需要焦点区域和引导信息View</h3><p>设置引导用户关注的区域，提供两种类型，根据需要选择。 一种是圆形区域，调用对象方法 setCircularFocus ，传入GCPoint类型参数为圆形位置，radius为半径。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[guideView setCircularFocus:GCPoint radius:int];</div></pre></td></tr></table></figure></p>\n<p>提示引导信息的View 调用对象方法 addTipsView:传入一个你自己的自定义UIView(通常是一个UIImageView或者一个UILabel)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[guideView addTipsView:UIView];</div></pre></td></tr></table></figure></p>\n<h3 id=\"实现代理方法\"><a href=\"#实现代理方法\" class=\"headerlink\" title=\"实现代理方法\"></a>实现代理方法</h3><p>如果想要在点击完引导层的时候时候做一些事情，这里提供一个代理方法，得到当前点击的引导层的名字标识</p>\n<h4 id=\"遵守协议\"><a href=\"#遵守协议\" class=\"headerlink\" title=\"遵守协议\"></a>遵守协议</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">@interface RootViewController ()&lt;XYMGuideViewDelegate&gt;</div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<h4 id=\"设置代理\"><a href=\"#设置代理\" class=\"headerlink\" title=\"设置代理\"></a>设置代理</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">guideView.delegate = self;</div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<h4 id=\"实现代理方法-1\"><a href=\"#实现代理方法-1\" class=\"headerlink\" title=\"实现代理方法\"></a>实现代理方法</h4><p>拿到当前点击的引导层的标识<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(void)XYMGuideClick:(NSString*)guideName&#123;</div><div class=\"line\">NSLog(@&quot;%@&quot;,guideName);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>github地址：<a href=\"https://github.com/MeXuym/XYMGuideView\">XYMGuideView</a></p>"},{"title":"XYMScan","date":"2016-11-07T15:47:44.000Z","_content":"二维码和条形码扫描，依赖原生AVFoundation框架实现，简单封装\n\n![XYMScan](https://raw.githubusercontent.com/MeXuym/hexoSource/master/_posts/XYMScan/XYMScan.gif)\n\n## 使用\n<!--more-->\n### 导入头文件\n```\n#import \"XYMScanView.h\"\n```\n### 遵守协议\n```\n@interface XYMScanViewController ()<XYMScanViewDelegate>\n```\n\n### 创建对象\n\n在你要用到的控制器里面创建View（宽高设置为屏幕宽高\n```\nXYMScanView *scanV = [[XYMScanView alloc]initWithFrame:CGRectMake(0, 0, ScreenWidth, ScreenHeight)];\nscanV.delegate = self;\n[self.view addSubview:scanV];\n```\n\n### 设置扫码框的宽度\n\n设置扫码框的宽度，不设置默认是250（正方形）\n```\nscanV.scanW = 250;\n```\n\n### 实现代理方法\n\n拿到扫码的数据scanDataString\n```\n-(void)getScanDataString:(NSString*)scanDataString{\n}\n```\n\n### 对象方法\n\n提供两个对象方法（开始扫码，结束扫码）\n```\n- (void)startRunning;\n- (void)stopRunning;\n\n```\n\ngithub地址：[XYMScan](https://github.com/MeXuym/XYMScan)\n","source":"_posts/XYMScan.md","raw":"---\ntitle: XYMScan\ndate: 2016-11-07 23:47:44\ncategories: \"iOS\"\ntags: \"轮子\"\n---\n二维码和条形码扫描，依赖原生AVFoundation框架实现，简单封装\n\n![XYMScan](https://raw.githubusercontent.com/MeXuym/hexoSource/master/_posts/XYMScan/XYMScan.gif)\n\n## 使用\n<!--more-->\n### 导入头文件\n```\n#import \"XYMScanView.h\"\n```\n### 遵守协议\n```\n@interface XYMScanViewController ()<XYMScanViewDelegate>\n```\n\n### 创建对象\n\n在你要用到的控制器里面创建View（宽高设置为屏幕宽高\n```\nXYMScanView *scanV = [[XYMScanView alloc]initWithFrame:CGRectMake(0, 0, ScreenWidth, ScreenHeight)];\nscanV.delegate = self;\n[self.view addSubview:scanV];\n```\n\n### 设置扫码框的宽度\n\n设置扫码框的宽度，不设置默认是250（正方形）\n```\nscanV.scanW = 250;\n```\n\n### 实现代理方法\n\n拿到扫码的数据scanDataString\n```\n-(void)getScanDataString:(NSString*)scanDataString{\n}\n```\n\n### 对象方法\n\n提供两个对象方法（开始扫码，结束扫码）\n```\n- (void)startRunning;\n- (void)stopRunning;\n\n```\n\ngithub地址：[XYMScan](https://github.com/MeXuym/XYMScan)\n","slug":"XYMScan","published":1,"updated":"2017-02-15T09:05:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz7u5y0t0002sdsay4b4ffn8","content":"<p>二维码和条形码扫描，依赖原生AVFoundation框架实现，简单封装</p>\n<p><img src=\"https://raw.githubusercontent.com/MeXuym/hexoSource/master/_posts/XYMScan/XYMScan.gif\" alt=\"XYMScan\"></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><a id=\"more\"></a>\n<h3 id=\"导入头文件\"><a href=\"#导入头文件\" class=\"headerlink\" title=\"导入头文件\"></a>导入头文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &quot;XYMScanView.h&quot;</div></pre></td></tr></table></figure>\n<h3 id=\"遵守协议\"><a href=\"#遵守协议\" class=\"headerlink\" title=\"遵守协议\"></a>遵守协议</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@interface XYMScanViewController ()&lt;XYMScanViewDelegate&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h3><p>在你要用到的控制器里面创建View（宽高设置为屏幕宽高<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">XYMScanView *scanV = [[XYMScanView alloc]initWithFrame:CGRectMake(0, 0, ScreenWidth, ScreenHeight)];</div><div class=\"line\">scanV.delegate = self;</div><div class=\"line\">[self.view addSubview:scanV];</div></pre></td></tr></table></figure></p>\n<h3 id=\"设置扫码框的宽度\"><a href=\"#设置扫码框的宽度\" class=\"headerlink\" title=\"设置扫码框的宽度\"></a>设置扫码框的宽度</h3><p>设置扫码框的宽度，不设置默认是250（正方形）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">scanV.scanW = 250;</div></pre></td></tr></table></figure></p>\n<h3 id=\"实现代理方法\"><a href=\"#实现代理方法\" class=\"headerlink\" title=\"实现代理方法\"></a>实现代理方法</h3><p>拿到扫码的数据scanDataString<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(void)getScanDataString:(NSString*)scanDataString&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"对象方法\"><a href=\"#对象方法\" class=\"headerlink\" title=\"对象方法\"></a>对象方法</h3><p>提供两个对象方法（开始扫码，结束扫码）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)startRunning;</div><div class=\"line\">- (void)stopRunning;</div></pre></td></tr></table></figure></p>\n<p>github地址：<a href=\"https://github.com/MeXuym/XYMScan\" target=\"_blank\" rel=\"external\">XYMScan</a></p>\n","excerpt":"<p>二维码和条形码扫描，依赖原生AVFoundation框架实现，简单封装</p>\n<p><img src=\"https://raw.githubusercontent.com/MeXuym/hexoSource/master/_posts/XYMScan/XYMScan.gif\" alt=\"XYMScan\"></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2>","more":"<h3 id=\"导入头文件\"><a href=\"#导入头文件\" class=\"headerlink\" title=\"导入头文件\"></a>导入头文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &quot;XYMScanView.h&quot;</div></pre></td></tr></table></figure>\n<h3 id=\"遵守协议\"><a href=\"#遵守协议\" class=\"headerlink\" title=\"遵守协议\"></a>遵守协议</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@interface XYMScanViewController ()&lt;XYMScanViewDelegate&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h3><p>在你要用到的控制器里面创建View（宽高设置为屏幕宽高<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">XYMScanView *scanV = [[XYMScanView alloc]initWithFrame:CGRectMake(0, 0, ScreenWidth, ScreenHeight)];</div><div class=\"line\">scanV.delegate = self;</div><div class=\"line\">[self.view addSubview:scanV];</div></pre></td></tr></table></figure></p>\n<h3 id=\"设置扫码框的宽度\"><a href=\"#设置扫码框的宽度\" class=\"headerlink\" title=\"设置扫码框的宽度\"></a>设置扫码框的宽度</h3><p>设置扫码框的宽度，不设置默认是250（正方形）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">scanV.scanW = 250;</div></pre></td></tr></table></figure></p>\n<h3 id=\"实现代理方法\"><a href=\"#实现代理方法\" class=\"headerlink\" title=\"实现代理方法\"></a>实现代理方法</h3><p>拿到扫码的数据scanDataString<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(void)getScanDataString:(NSString*)scanDataString&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"对象方法\"><a href=\"#对象方法\" class=\"headerlink\" title=\"对象方法\"></a>对象方法</h3><p>提供两个对象方法（开始扫码，结束扫码）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)startRunning;</div><div class=\"line\">- (void)stopRunning;</div></pre></td></tr></table></figure></p>\n<p>github地址：<a href=\"https://github.com/MeXuym/XYMScan\">XYMScan</a></p>"},{"title":"黄金蛋炒饭","date":"2016-11-04T15:47:44.000Z","_content":"闷热的周六上午，不知道什么原因空调凌晨自己关闭了。睁眼已是10点多，后背有些粘，起床冲凉…\n想起昨夜还有些剩饭，望了望冰箱里面还有三个鸡蛋和一个大西红柿。\n于是想到尝试下黄金蛋炒饭，刚好蛋白也不浪费，滚个西红柿汤。\n\n## 开始炒\n<!--more-->\n### 取蛋黄\n\n三个鸡蛋打下碗里，用汤匙捞起蛋黄。\n蛋黄打散，放点盐。\n\n### 加蛋黄\n\n适当关小有点火，蛋黄尽量均匀的倒入饭面，快速翻炒。\n\n### 为什么会粘锅？\n\n以我高中三年炒饭炒面的经验来说，一开始炒的时候多少会有点粘锅。家里大多是普通的铁锅，不粘锅除外。还有就是除非你下的油比较多（油适量就好）。\n家里的普通铁锅在一开始饭里水分还比较多的时候，是会粘的。别慌，保持翻炒，一边把粘的饭铲起来，慢慢会发现不粘了。\n不管是炒饭还是炒面，炒到水分流失到一定程度，就不会粘锅了，通常这时候就可以起锅。\n一直以来，我也是以炒到不粘了来决定起锅的时机。这时候的炒饭粒粒分明，不会很油也不会太干。\n","source":"_posts/hello-world.md","raw":"---\ntitle: \"黄金蛋炒饭\"\ndate: 2016-11-04 23:47:44\ncategories: \"食\"\ntags: \"炒\"\n---\n闷热的周六上午，不知道什么原因空调凌晨自己关闭了。睁眼已是10点多，后背有些粘，起床冲凉…\n想起昨夜还有些剩饭，望了望冰箱里面还有三个鸡蛋和一个大西红柿。\n于是想到尝试下黄金蛋炒饭，刚好蛋白也不浪费，滚个西红柿汤。\n\n## 开始炒\n<!--more-->\n### 取蛋黄\n\n三个鸡蛋打下碗里，用汤匙捞起蛋黄。\n蛋黄打散，放点盐。\n\n### 加蛋黄\n\n适当关小有点火，蛋黄尽量均匀的倒入饭面，快速翻炒。\n\n### 为什么会粘锅？\n\n以我高中三年炒饭炒面的经验来说，一开始炒的时候多少会有点粘锅。家里大多是普通的铁锅，不粘锅除外。还有就是除非你下的油比较多（油适量就好）。\n家里的普通铁锅在一开始饭里水分还比较多的时候，是会粘的。别慌，保持翻炒，一边把粘的饭铲起来，慢慢会发现不粘了。\n不管是炒饭还是炒面，炒到水分流失到一定程度，就不会粘锅了，通常这时候就可以起锅。\n一直以来，我也是以炒到不粘了来决定起锅的时机。这时候的炒饭粒粒分明，不会很油也不会太干。\n","slug":"hello-world","published":1,"updated":"2017-02-15T08:40:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz7u5y0z0005sdsad6px1302","content":"<p>闷热的周六上午，不知道什么原因空调凌晨自己关闭了。睁眼已是10点多，后背有些粘，起床冲凉…<br>想起昨夜还有些剩饭，望了望冰箱里面还有三个鸡蛋和一个大西红柿。<br>于是想到尝试下黄金蛋炒饭，刚好蛋白也不浪费，滚个西红柿汤。</p>\n<h2 id=\"开始炒\"><a href=\"#开始炒\" class=\"headerlink\" title=\"开始炒\"></a>开始炒</h2><a id=\"more\"></a>\n<h3 id=\"取蛋黄\"><a href=\"#取蛋黄\" class=\"headerlink\" title=\"取蛋黄\"></a>取蛋黄</h3><p>三个鸡蛋打下碗里，用汤匙捞起蛋黄。<br>蛋黄打散，放点盐。</p>\n<h3 id=\"加蛋黄\"><a href=\"#加蛋黄\" class=\"headerlink\" title=\"加蛋黄\"></a>加蛋黄</h3><p>适当关小有点火，蛋黄尽量均匀的倒入饭面，快速翻炒。</p>\n<h3 id=\"为什么会粘锅？\"><a href=\"#为什么会粘锅？\" class=\"headerlink\" title=\"为什么会粘锅？\"></a>为什么会粘锅？</h3><p>以我高中三年炒饭炒面的经验来说，一开始炒的时候多少会有点粘锅。家里大多是普通的铁锅，不粘锅除外。还有就是除非你下的油比较多（油适量就好）。<br>家里的普通铁锅在一开始饭里水分还比较多的时候，是会粘的。别慌，保持翻炒，一边把粘的饭铲起来，慢慢会发现不粘了。<br>不管是炒饭还是炒面，炒到水分流失到一定程度，就不会粘锅了，通常这时候就可以起锅。<br>一直以来，我也是以炒到不粘了来决定起锅的时机。这时候的炒饭粒粒分明，不会很油也不会太干。</p>\n","excerpt":"<p>闷热的周六上午，不知道什么原因空调凌晨自己关闭了。睁眼已是10点多，后背有些粘，起床冲凉…<br>想起昨夜还有些剩饭，望了望冰箱里面还有三个鸡蛋和一个大西红柿。<br>于是想到尝试下黄金蛋炒饭，刚好蛋白也不浪费，滚个西红柿汤。</p>\n<h2 id=\"开始炒\"><a href=\"#开始炒\" class=\"headerlink\" title=\"开始炒\"></a>开始炒</h2>","more":"<h3 id=\"取蛋黄\"><a href=\"#取蛋黄\" class=\"headerlink\" title=\"取蛋黄\"></a>取蛋黄</h3><p>三个鸡蛋打下碗里，用汤匙捞起蛋黄。<br>蛋黄打散，放点盐。</p>\n<h3 id=\"加蛋黄\"><a href=\"#加蛋黄\" class=\"headerlink\" title=\"加蛋黄\"></a>加蛋黄</h3><p>适当关小有点火，蛋黄尽量均匀的倒入饭面，快速翻炒。</p>\n<h3 id=\"为什么会粘锅？\"><a href=\"#为什么会粘锅？\" class=\"headerlink\" title=\"为什么会粘锅？\"></a>为什么会粘锅？</h3><p>以我高中三年炒饭炒面的经验来说，一开始炒的时候多少会有点粘锅。家里大多是普通的铁锅，不粘锅除外。还有就是除非你下的油比较多（油适量就好）。<br>家里的普通铁锅在一开始饭里水分还比较多的时候，是会粘的。别慌，保持翻炒，一边把粘的饭铲起来，慢慢会发现不粘了。<br>不管是炒饭还是炒面，炒到水分流失到一定程度，就不会粘锅了，通常这时候就可以起锅。<br>一直以来，我也是以炒到不粘了来决定起锅的时机。这时候的炒饭粒粒分明，不会很油也不会太干。</p>"},{"title":"实现如masonry的链式语法","date":"2016-11-24T15:47:44.000Z","_content":"\n之前在项目中有用到过masonry,它让我们很方便的用代码实现来写约束。\n它写约束的时候语法如下：\n\n```\n[view mas_makeConstraints:^(MASConstraintMaker *make) {\nmake.edges.equalTo(superview).with.insets(padding);\n}];\n```\n那时候就觉得它这种一路点下去的链式语法好方便。看过它的源码过后，它其实运用了block的一种用法，block充当返回值。\n\n<!--more-->\n\n### block充当返回值\n\n作为方法返回值，内部不能调用，只能外界调用，相当于代替了方法！\n我们写一个Human类作为例子，定义和实现一个run方法，返回值是一个block\n\n```\n- (void (^)(int))run\n{\nreturn ^(int value){\nNSLog(@\"跑了%d米\",value);\n};\n}\n```\n\n那么这个方法我们可以在viewController中这样调用\n\n```\nhumanObject.run(1); //输出 “跑了1米”\n```\n好！我们已经实现了链式语法了，已经可以“.run(1)”了。\n噗！。。。没用啊！这只能“.run”一次啊，我们要的是“.run(1).run(2).run(3).run(4)…”\n好下面我们就看下一直“.run”下去怎么实现。\n\n### block作为返回值实现链式语法\n\n想一下我们在前面写了什么东西的时候可以“.run”（我们前面是创建了一个Human对象，然后 humanObject.run(1)）\n当humanObject.run(1)完后我们也能得到一个humanObject的话不就可以继续”.run“了\n于是对前面实现的方法做一些改动：\n\n```\n//.h文件也要做相应改动\n- (Human *(^)(int))run\n{\nreturn ^ (int value){\nNSLog(@\"跑了%d米\",value); //要执行的操作\nreturn self;             //这一句是关键\n};\n}\n```\n\n### 结果\n\n接下来我们就可以一路”.run()“下去了。\n\n```\nHuman *man = [[Human alloc]init];\nman.run(1).run(2).run(3).run(4).run(5);\n```\n\n### 输出结果：\n\n```\nChainSyntax[10915:496122] 跑了1米\nChainSyntax[10915:496122] 跑了2米\nChainSyntax[10915:496122] 跑了3米\nChainSyntax[10915:496122] 跑了4米\nChainSyntax[10915:496122] 跑了5米\n```\n\n### Demo\ngithub地址：[实现如masonry的链式语法](https://github.com/MeXuym/ChainSyntax)\n","source":"_posts/实现如masonry的链式语法.md","raw":"---\ntitle: 实现如masonry的链式语法\ndate: 2016-11-24 23:47:44\ncategories: \"iOS\"\ntags: \"轮子\"\n---\n\n之前在项目中有用到过masonry,它让我们很方便的用代码实现来写约束。\n它写约束的时候语法如下：\n\n```\n[view mas_makeConstraints:^(MASConstraintMaker *make) {\nmake.edges.equalTo(superview).with.insets(padding);\n}];\n```\n那时候就觉得它这种一路点下去的链式语法好方便。看过它的源码过后，它其实运用了block的一种用法，block充当返回值。\n\n<!--more-->\n\n### block充当返回值\n\n作为方法返回值，内部不能调用，只能外界调用，相当于代替了方法！\n我们写一个Human类作为例子，定义和实现一个run方法，返回值是一个block\n\n```\n- (void (^)(int))run\n{\nreturn ^(int value){\nNSLog(@\"跑了%d米\",value);\n};\n}\n```\n\n那么这个方法我们可以在viewController中这样调用\n\n```\nhumanObject.run(1); //输出 “跑了1米”\n```\n好！我们已经实现了链式语法了，已经可以“.run(1)”了。\n噗！。。。没用啊！这只能“.run”一次啊，我们要的是“.run(1).run(2).run(3).run(4)…”\n好下面我们就看下一直“.run”下去怎么实现。\n\n### block作为返回值实现链式语法\n\n想一下我们在前面写了什么东西的时候可以“.run”（我们前面是创建了一个Human对象，然后 humanObject.run(1)）\n当humanObject.run(1)完后我们也能得到一个humanObject的话不就可以继续”.run“了\n于是对前面实现的方法做一些改动：\n\n```\n//.h文件也要做相应改动\n- (Human *(^)(int))run\n{\nreturn ^ (int value){\nNSLog(@\"跑了%d米\",value); //要执行的操作\nreturn self;             //这一句是关键\n};\n}\n```\n\n### 结果\n\n接下来我们就可以一路”.run()“下去了。\n\n```\nHuman *man = [[Human alloc]init];\nman.run(1).run(2).run(3).run(4).run(5);\n```\n\n### 输出结果：\n\n```\nChainSyntax[10915:496122] 跑了1米\nChainSyntax[10915:496122] 跑了2米\nChainSyntax[10915:496122] 跑了3米\nChainSyntax[10915:496122] 跑了4米\nChainSyntax[10915:496122] 跑了5米\n```\n\n### Demo\ngithub地址：[实现如masonry的链式语法](https://github.com/MeXuym/ChainSyntax)\n","slug":"实现如masonry的链式语法","published":1,"updated":"2017-02-15T09:27:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz7u5y130006sdsaaz8a4enf","content":"<p>之前在项目中有用到过masonry,它让我们很方便的用代码实现来写约束。<br>它写约束的时候语法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[view mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class=\"line\">make.edges.equalTo(superview).with.insets(padding);</div><div class=\"line\">&#125;];</div></pre></td></tr></table></figure>\n<p>那时候就觉得它这种一路点下去的链式语法好方便。看过它的源码过后，它其实运用了block的一种用法，block充当返回值。</p>\n<a id=\"more\"></a>\n<h3 id=\"block充当返回值\"><a href=\"#block充当返回值\" class=\"headerlink\" title=\"block充当返回值\"></a>block充当返回值</h3><p>作为方法返回值，内部不能调用，只能外界调用，相当于代替了方法！<br>我们写一个Human类作为例子，定义和实现一个run方法，返回值是一个block</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void (^)(int))run</div><div class=\"line\">&#123;</div><div class=\"line\">return ^(int value)&#123;</div><div class=\"line\">NSLog(@&quot;跑了%d米&quot;,value);</div><div class=\"line\">&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>那么这个方法我们可以在viewController中这样调用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">humanObject.run(1); //输出 “跑了1米”</div></pre></td></tr></table></figure>\n<p>好！我们已经实现了链式语法了，已经可以“.run(1)”了。<br>噗！。。。没用啊！这只能“.run”一次啊，我们要的是“.run(1).run(2).run(3).run(4)…”<br>好下面我们就看下一直“.run”下去怎么实现。</p>\n<h3 id=\"block作为返回值实现链式语法\"><a href=\"#block作为返回值实现链式语法\" class=\"headerlink\" title=\"block作为返回值实现链式语法\"></a>block作为返回值实现链式语法</h3><p>想一下我们在前面写了什么东西的时候可以“.run”（我们前面是创建了一个Human对象，然后 humanObject.run(1)）<br>当humanObject.run(1)完后我们也能得到一个humanObject的话不就可以继续”.run“了<br>于是对前面实现的方法做一些改动：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">//.h文件也要做相应改动</div><div class=\"line\">- (Human *(^)(int))run</div><div class=\"line\">&#123;</div><div class=\"line\">return ^ (int value)&#123;</div><div class=\"line\">NSLog(@&quot;跑了%d米&quot;,value); //要执行的操作</div><div class=\"line\">return self;             //这一句是关键</div><div class=\"line\">&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h3><p>接下来我们就可以一路”.run()“下去了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Human *man = [[Human alloc]init];</div><div class=\"line\">man.run(1).run(2).run(3).run(4).run(5);</div></pre></td></tr></table></figure>\n<h3 id=\"输出结果：\"><a href=\"#输出结果：\" class=\"headerlink\" title=\"输出结果：\"></a>输出结果：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ChainSyntax[10915:496122] 跑了1米</div><div class=\"line\">ChainSyntax[10915:496122] 跑了2米</div><div class=\"line\">ChainSyntax[10915:496122] 跑了3米</div><div class=\"line\">ChainSyntax[10915:496122] 跑了4米</div><div class=\"line\">ChainSyntax[10915:496122] 跑了5米</div></pre></td></tr></table></figure>\n<h3 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h3><p>github地址：<a href=\"https://github.com/MeXuym/ChainSyntax\" target=\"_blank\" rel=\"external\">实现如masonry的链式语法</a></p>\n","excerpt":"<p>之前在项目中有用到过masonry,它让我们很方便的用代码实现来写约束。<br>它写约束的时候语法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[view mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class=\"line\">make.edges.equalTo(superview).with.insets(padding);</div><div class=\"line\">&#125;];</div></pre></td></tr></table></figure>\n<p>那时候就觉得它这种一路点下去的链式语法好方便。看过它的源码过后，它其实运用了block的一种用法，block充当返回值。</p>","more":"<h3 id=\"block充当返回值\"><a href=\"#block充当返回值\" class=\"headerlink\" title=\"block充当返回值\"></a>block充当返回值</h3><p>作为方法返回值，内部不能调用，只能外界调用，相当于代替了方法！<br>我们写一个Human类作为例子，定义和实现一个run方法，返回值是一个block</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void (^)(int))run</div><div class=\"line\">&#123;</div><div class=\"line\">return ^(int value)&#123;</div><div class=\"line\">NSLog(@&quot;跑了%d米&quot;,value);</div><div class=\"line\">&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>那么这个方法我们可以在viewController中这样调用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">humanObject.run(1); //输出 “跑了1米”</div></pre></td></tr></table></figure>\n<p>好！我们已经实现了链式语法了，已经可以“.run(1)”了。<br>噗！。。。没用啊！这只能“.run”一次啊，我们要的是“.run(1).run(2).run(3).run(4)…”<br>好下面我们就看下一直“.run”下去怎么实现。</p>\n<h3 id=\"block作为返回值实现链式语法\"><a href=\"#block作为返回值实现链式语法\" class=\"headerlink\" title=\"block作为返回值实现链式语法\"></a>block作为返回值实现链式语法</h3><p>想一下我们在前面写了什么东西的时候可以“.run”（我们前面是创建了一个Human对象，然后 humanObject.run(1)）<br>当humanObject.run(1)完后我们也能得到一个humanObject的话不就可以继续”.run“了<br>于是对前面实现的方法做一些改动：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">//.h文件也要做相应改动</div><div class=\"line\">- (Human *(^)(int))run</div><div class=\"line\">&#123;</div><div class=\"line\">return ^ (int value)&#123;</div><div class=\"line\">NSLog(@&quot;跑了%d米&quot;,value); //要执行的操作</div><div class=\"line\">return self;             //这一句是关键</div><div class=\"line\">&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h3><p>接下来我们就可以一路”.run()“下去了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Human *man = [[Human alloc]init];</div><div class=\"line\">man.run(1).run(2).run(3).run(4).run(5);</div></pre></td></tr></table></figure>\n<h3 id=\"输出结果：\"><a href=\"#输出结果：\" class=\"headerlink\" title=\"输出结果：\"></a>输出结果：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ChainSyntax[10915:496122] 跑了1米</div><div class=\"line\">ChainSyntax[10915:496122] 跑了2米</div><div class=\"line\">ChainSyntax[10915:496122] 跑了3米</div><div class=\"line\">ChainSyntax[10915:496122] 跑了4米</div><div class=\"line\">ChainSyntax[10915:496122] 跑了5米</div></pre></td></tr></table></figure>\n<h3 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h3><p>github地址：<a href=\"https://github.com/MeXuym/ChainSyntax\">实现如masonry的链式语法</a></p>"},{"title":"pushAnimation","date":"2016-12-01T15:47:44.000Z","_content":"在之前的项目中，应产品的要求，需要实现自定义的push和pop动画。最近比较有空，于是把这一部分抽出来\n\n![pushAnimation](https://raw.githubusercontent.com/MeXuym/hexoSource/master/_posts/pushAnimation/push.gif)\n\n## 要做的事情\n1.我们会自定义一个自己的动画类\n2.自定义自己的一个NavigationController（要使用自定义的push动画，就继承这个类）\n<!--more-->\n\n## 自定义动画类\n\n我们先实现一个push自定义动画类姑且叫做XYMAnimation，它实现UIViewControllerAnimatedTransitioning协议，用来定义一个非交互动画（就是动画过程中没交互）\n\n### 遵守协议\n\n动画类.h文件遵守协议。还有两个属性分别表示当前的navigationController，和动画的类型（push或者pop)。\n\n\n```\n#define ScreenWidth [UIScreen mainScreen].bounds.size.width\n#define ScreenHeight [UIScreen mainScreen].bounds.size.height\n\n#import <Foundation/Foundation.h>\n#import <UIKit/UIKit.h>\n\n@interface XYMAnimation : NSObject<UIViewControllerAnimatedTransitioning>\n\n@property(nonatomic,assign)UINavigationControllerOperation  navigationOperation;\n@property(nonatomic,weak)UINavigationController * navigationController;\n\n@end\n```\n### .m文件中实现两个协议方法\n\n动画持续的时间。\n```\n- (NSTimeInterval)transitionDuration:(id<UIViewControllerContextTransitioning>)transitionContext\n{\n  return 3.0;\n}\n```\n\n动画的内容，动画怎么做完全取决于你，下面是我写的平移动画，你还可以缩放和旋转动画。\n\n```\n- (void)animateTransition:(id<UIViewControllerContextTransitioning>)transitionContext\n{\n  //目的ViewController\n  UIViewController *toViewController = [transitionContext viewControllerForKey:UITransitionContextToViewControllerKey];\n\n  //起始ViewController\n  UIViewController *fromViewController = [transitionContext viewControllerForKey:UITransitionContextFromViewControllerKey];\n\n  //添加toView到上下文\n  [[transitionContext containerView] insertSubview:toViewController.view belowSubview:fromViewController.view];\n\n  //自定义动画\n  toViewController.view.transform = CGAffineTransformMakeTranslation(320, 568);\n  [UIView animateWithDuration:[self transitionDuration:transitionContext] animations:^{\n\n    fromViewController.view.transform = CGAffineTransformMakeTranslation(-320, -568);\n    toViewController.view.transform = CGAffineTransformIdentity;\n\n  } completion:^(BOOL finished) {\n\n    fromViewController.view.transform = CGAffineTransformIdentity;\n    // 声明过渡结束时调用 completeTransition: 这个方法\n   [transitionContext completeTransition:![transitionContext transitionWasCancelled]];\n  }];\n}\n```\n\n## 自定义NavigationController\n\n继承自UINavigationController类，遵守 UINavigationControllerDelegate 协议。\nXYMPushAnmation就是前面自定义的动画类，这里要用到\n```\n@interface RootViewController ()<UINavigationControllerDelegate>\n\n@property (nonatomic,strong)XYMPushAnmation *xymPushAnmation;\n\n@end\n```\n\n### .m文件中创建自定义动画实例\n\n```\n- (XYMPushAnmation *)xymPushAnmation\n{\n  if (_xymPushAnmation == nil) {\n     _xymPushAnmation = [[XYMPushAnmation alloc]init];\n  }\n  return _xymPushAnmation;\n}\n\n- (void)viewDidLoad {\n\n  self.delegate = self;\n  _xymPushAnmation = [[XYMPushAnmation alloc] init];\n}\n```\n\n### 关键点：实现这一个代理方法，使用我们自定义的动画\n\n```\n//这个代理方法里面使用我们的自定义的动画\n- (nullable id <UIViewControllerAnimatedTransitioning>)navigationController:(UINavigationController *)navigationController\nanimationControllerForOperation:(UINavigationControllerOperation)operation\nfromViewController:(UIViewController *)fromVC\ntoViewController:(UIViewController *)toVC  NS_AVAILABLE_IOS(7_0)\n{\n  self.xymPushAnmation.navigationController = self;      //当前这个navigationController使用这个动画\n  self.xymPushAnmation.navigationOperation = operation;  //operation可以知道是在做push还是pop\n  return self.xymPushAnmation;                           //使用我们的自定义动画\n}\n```\n\n## Demo\n\nDemo：[github地址](https://github.com/MeXuym/PushPopAnimation)\n","source":"_posts/pushAnimation.md","raw":"---\ntitle: pushAnimation\ndate: 2016-12-01 23:47:44\ncategories: \"iOS\"\ntags: \"动画\"\n---\n在之前的项目中，应产品的要求，需要实现自定义的push和pop动画。最近比较有空，于是把这一部分抽出来\n\n![pushAnimation](https://raw.githubusercontent.com/MeXuym/hexoSource/master/_posts/pushAnimation/push.gif)\n\n## 要做的事情\n1.我们会自定义一个自己的动画类\n2.自定义自己的一个NavigationController（要使用自定义的push动画，就继承这个类）\n<!--more-->\n\n## 自定义动画类\n\n我们先实现一个push自定义动画类姑且叫做XYMAnimation，它实现UIViewControllerAnimatedTransitioning协议，用来定义一个非交互动画（就是动画过程中没交互）\n\n### 遵守协议\n\n动画类.h文件遵守协议。还有两个属性分别表示当前的navigationController，和动画的类型（push或者pop)。\n\n\n```\n#define ScreenWidth [UIScreen mainScreen].bounds.size.width\n#define ScreenHeight [UIScreen mainScreen].bounds.size.height\n\n#import <Foundation/Foundation.h>\n#import <UIKit/UIKit.h>\n\n@interface XYMAnimation : NSObject<UIViewControllerAnimatedTransitioning>\n\n@property(nonatomic,assign)UINavigationControllerOperation  navigationOperation;\n@property(nonatomic,weak)UINavigationController * navigationController;\n\n@end\n```\n### .m文件中实现两个协议方法\n\n动画持续的时间。\n```\n- (NSTimeInterval)transitionDuration:(id<UIViewControllerContextTransitioning>)transitionContext\n{\n  return 3.0;\n}\n```\n\n动画的内容，动画怎么做完全取决于你，下面是我写的平移动画，你还可以缩放和旋转动画。\n\n```\n- (void)animateTransition:(id<UIViewControllerContextTransitioning>)transitionContext\n{\n  //目的ViewController\n  UIViewController *toViewController = [transitionContext viewControllerForKey:UITransitionContextToViewControllerKey];\n\n  //起始ViewController\n  UIViewController *fromViewController = [transitionContext viewControllerForKey:UITransitionContextFromViewControllerKey];\n\n  //添加toView到上下文\n  [[transitionContext containerView] insertSubview:toViewController.view belowSubview:fromViewController.view];\n\n  //自定义动画\n  toViewController.view.transform = CGAffineTransformMakeTranslation(320, 568);\n  [UIView animateWithDuration:[self transitionDuration:transitionContext] animations:^{\n\n    fromViewController.view.transform = CGAffineTransformMakeTranslation(-320, -568);\n    toViewController.view.transform = CGAffineTransformIdentity;\n\n  } completion:^(BOOL finished) {\n\n    fromViewController.view.transform = CGAffineTransformIdentity;\n    // 声明过渡结束时调用 completeTransition: 这个方法\n   [transitionContext completeTransition:![transitionContext transitionWasCancelled]];\n  }];\n}\n```\n\n## 自定义NavigationController\n\n继承自UINavigationController类，遵守 UINavigationControllerDelegate 协议。\nXYMPushAnmation就是前面自定义的动画类，这里要用到\n```\n@interface RootViewController ()<UINavigationControllerDelegate>\n\n@property (nonatomic,strong)XYMPushAnmation *xymPushAnmation;\n\n@end\n```\n\n### .m文件中创建自定义动画实例\n\n```\n- (XYMPushAnmation *)xymPushAnmation\n{\n  if (_xymPushAnmation == nil) {\n     _xymPushAnmation = [[XYMPushAnmation alloc]init];\n  }\n  return _xymPushAnmation;\n}\n\n- (void)viewDidLoad {\n\n  self.delegate = self;\n  _xymPushAnmation = [[XYMPushAnmation alloc] init];\n}\n```\n\n### 关键点：实现这一个代理方法，使用我们自定义的动画\n\n```\n//这个代理方法里面使用我们的自定义的动画\n- (nullable id <UIViewControllerAnimatedTransitioning>)navigationController:(UINavigationController *)navigationController\nanimationControllerForOperation:(UINavigationControllerOperation)operation\nfromViewController:(UIViewController *)fromVC\ntoViewController:(UIViewController *)toVC  NS_AVAILABLE_IOS(7_0)\n{\n  self.xymPushAnmation.navigationController = self;      //当前这个navigationController使用这个动画\n  self.xymPushAnmation.navigationOperation = operation;  //operation可以知道是在做push还是pop\n  return self.xymPushAnmation;                           //使用我们的自定义动画\n}\n```\n\n## Demo\n\nDemo：[github地址](https://github.com/MeXuym/PushPopAnimation)\n","slug":"pushAnimation","published":1,"updated":"2017-02-16T03:10:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz7u5y140007sdsa2wp8u0di","content":"<p>在之前的项目中，应产品的要求，需要实现自定义的push和pop动画。最近比较有空，于是把这一部分抽出来</p>\n<p><img src=\"https://raw.githubusercontent.com/MeXuym/hexoSource/master/_posts/pushAnimation/push.gif\" alt=\"pushAnimation\"></p>\n<h2 id=\"要做的事情\"><a href=\"#要做的事情\" class=\"headerlink\" title=\"要做的事情\"></a>要做的事情</h2><p>1.我们会自定义一个自己的动画类<br>2.自定义自己的一个NavigationController（要使用自定义的push动画，就继承这个类）<br><a id=\"more\"></a></p>\n<h2 id=\"自定义动画类\"><a href=\"#自定义动画类\" class=\"headerlink\" title=\"自定义动画类\"></a>自定义动画类</h2><p>我们先实现一个push自定义动画类姑且叫做XYMAnimation，它实现UIViewControllerAnimatedTransitioning协议，用来定义一个非交互动画（就是动画过程中没交互）</p>\n<h3 id=\"遵守协议\"><a href=\"#遵守协议\" class=\"headerlink\" title=\"遵守协议\"></a>遵守协议</h3><p>动画类.h文件遵守协议。还有两个属性分别表示当前的navigationController，和动画的类型（push或者pop)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">#define ScreenWidth [UIScreen mainScreen].bounds.size.width</div><div class=\"line\">#define ScreenHeight [UIScreen mainScreen].bounds.size.height</div><div class=\"line\"></div><div class=\"line\">#import &lt;Foundation/Foundation.h&gt;</div><div class=\"line\">#import &lt;UIKit/UIKit.h&gt;</div><div class=\"line\"></div><div class=\"line\">@interface XYMAnimation : NSObject&lt;UIViewControllerAnimatedTransitioning&gt;</div><div class=\"line\"></div><div class=\"line\">@property(nonatomic,assign)UINavigationControllerOperation  navigationOperation;</div><div class=\"line\">@property(nonatomic,weak)UINavigationController * navigationController;</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<h3 id=\"m文件中实现两个协议方法\"><a href=\"#m文件中实现两个协议方法\" class=\"headerlink\" title=\".m文件中实现两个协议方法\"></a>.m文件中实现两个协议方法</h3><p>动画持续的时间。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (NSTimeInterval)transitionDuration:(id&lt;UIViewControllerContextTransitioning&gt;)transitionContext</div><div class=\"line\">&#123;</div><div class=\"line\">  return 3.0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>动画的内容，动画怎么做完全取决于你，下面是我写的平移动画，你还可以缩放和旋转动画。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)animateTransition:(id&lt;UIViewControllerContextTransitioning&gt;)transitionContext</div><div class=\"line\">&#123;</div><div class=\"line\">  //目的ViewController</div><div class=\"line\">  UIViewController *toViewController = [transitionContext viewControllerForKey:UITransitionContextToViewControllerKey];</div><div class=\"line\"></div><div class=\"line\">  //起始ViewController</div><div class=\"line\">  UIViewController *fromViewController = [transitionContext viewControllerForKey:UITransitionContextFromViewControllerKey];</div><div class=\"line\"></div><div class=\"line\">  //添加toView到上下文</div><div class=\"line\">  [[transitionContext containerView] insertSubview:toViewController.view belowSubview:fromViewController.view];</div><div class=\"line\"></div><div class=\"line\">  //自定义动画</div><div class=\"line\">  toViewController.view.transform = CGAffineTransformMakeTranslation(320, 568);</div><div class=\"line\">  [UIView animateWithDuration:[self transitionDuration:transitionContext] animations:^&#123;</div><div class=\"line\"></div><div class=\"line\">    fromViewController.view.transform = CGAffineTransformMakeTranslation(-320, -568);</div><div class=\"line\">    toViewController.view.transform = CGAffineTransformIdentity;</div><div class=\"line\"></div><div class=\"line\">  &#125; completion:^(BOOL finished) &#123;</div><div class=\"line\"></div><div class=\"line\">    fromViewController.view.transform = CGAffineTransformIdentity;</div><div class=\"line\">    // 声明过渡结束时调用 completeTransition: 这个方法</div><div class=\"line\">   [transitionContext completeTransition:![transitionContext transitionWasCancelled]];</div><div class=\"line\">  &#125;];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"自定义NavigationController\"><a href=\"#自定义NavigationController\" class=\"headerlink\" title=\"自定义NavigationController\"></a>自定义NavigationController</h2><p>继承自UINavigationController类，遵守 UINavigationControllerDelegate 协议。<br>XYMPushAnmation就是前面自定义的动画类，这里要用到<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@interface RootViewController ()&lt;UINavigationControllerDelegate&gt;</div><div class=\"line\"></div><div class=\"line\">@property (nonatomic,strong)XYMPushAnmation *xymPushAnmation;</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure></p>\n<h3 id=\"m文件中创建自定义动画实例\"><a href=\"#m文件中创建自定义动画实例\" class=\"headerlink\" title=\".m文件中创建自定义动画实例\"></a>.m文件中创建自定义动画实例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (XYMPushAnmation *)xymPushAnmation</div><div class=\"line\">&#123;</div><div class=\"line\">  if (_xymPushAnmation == nil) &#123;</div><div class=\"line\">     _xymPushAnmation = [[XYMPushAnmation alloc]init];</div><div class=\"line\">  &#125;</div><div class=\"line\">  return _xymPushAnmation;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)viewDidLoad &#123;</div><div class=\"line\"></div><div class=\"line\">  self.delegate = self;</div><div class=\"line\">  _xymPushAnmation = [[XYMPushAnmation alloc] init];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"关键点：实现这一个代理方法，使用我们自定义的动画\"><a href=\"#关键点：实现这一个代理方法，使用我们自定义的动画\" class=\"headerlink\" title=\"关键点：实现这一个代理方法，使用我们自定义的动画\"></a>关键点：实现这一个代理方法，使用我们自定义的动画</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">//这个代理方法里面使用我们的自定义的动画</div><div class=\"line\">- (nullable id &lt;UIViewControllerAnimatedTransitioning&gt;)navigationController:(UINavigationController *)navigationController</div><div class=\"line\">animationControllerForOperation:(UINavigationControllerOperation)operation</div><div class=\"line\">fromViewController:(UIViewController *)fromVC</div><div class=\"line\">toViewController:(UIViewController *)toVC  NS_AVAILABLE_IOS(7_0)</div><div class=\"line\">&#123;</div><div class=\"line\">  self.xymPushAnmation.navigationController = self;      //当前这个navigationController使用这个动画</div><div class=\"line\">  self.xymPushAnmation.navigationOperation = operation;  //operation可以知道是在做push还是pop</div><div class=\"line\">  return self.xymPushAnmation;                           //使用我们的自定义动画</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p>Demo：<a href=\"https://github.com/MeXuym/PushPopAnimation\" target=\"_blank\" rel=\"external\">github地址</a></p>\n","excerpt":"<p>在之前的项目中，应产品的要求，需要实现自定义的push和pop动画。最近比较有空，于是把这一部分抽出来</p>\n<p><img src=\"https://raw.githubusercontent.com/MeXuym/hexoSource/master/_posts/pushAnimation/push.gif\" alt=\"pushAnimation\"></p>\n<h2 id=\"要做的事情\"><a href=\"#要做的事情\" class=\"headerlink\" title=\"要做的事情\"></a>要做的事情</h2><p>1.我们会自定义一个自己的动画类<br>2.自定义自己的一个NavigationController（要使用自定义的push动画，就继承这个类）<br>","more":"</p>\n<h2 id=\"自定义动画类\"><a href=\"#自定义动画类\" class=\"headerlink\" title=\"自定义动画类\"></a>自定义动画类</h2><p>我们先实现一个push自定义动画类姑且叫做XYMAnimation，它实现UIViewControllerAnimatedTransitioning协议，用来定义一个非交互动画（就是动画过程中没交互）</p>\n<h3 id=\"遵守协议\"><a href=\"#遵守协议\" class=\"headerlink\" title=\"遵守协议\"></a>遵守协议</h3><p>动画类.h文件遵守协议。还有两个属性分别表示当前的navigationController，和动画的类型（push或者pop)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">#define ScreenWidth [UIScreen mainScreen].bounds.size.width</div><div class=\"line\">#define ScreenHeight [UIScreen mainScreen].bounds.size.height</div><div class=\"line\"></div><div class=\"line\">#import &lt;Foundation/Foundation.h&gt;</div><div class=\"line\">#import &lt;UIKit/UIKit.h&gt;</div><div class=\"line\"></div><div class=\"line\">@interface XYMAnimation : NSObject&lt;UIViewControllerAnimatedTransitioning&gt;</div><div class=\"line\"></div><div class=\"line\">@property(nonatomic,assign)UINavigationControllerOperation  navigationOperation;</div><div class=\"line\">@property(nonatomic,weak)UINavigationController * navigationController;</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<h3 id=\"m文件中实现两个协议方法\"><a href=\"#m文件中实现两个协议方法\" class=\"headerlink\" title=\".m文件中实现两个协议方法\"></a>.m文件中实现两个协议方法</h3><p>动画持续的时间。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (NSTimeInterval)transitionDuration:(id&lt;UIViewControllerContextTransitioning&gt;)transitionContext</div><div class=\"line\">&#123;</div><div class=\"line\">  return 3.0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>动画的内容，动画怎么做完全取决于你，下面是我写的平移动画，你还可以缩放和旋转动画。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)animateTransition:(id&lt;UIViewControllerContextTransitioning&gt;)transitionContext</div><div class=\"line\">&#123;</div><div class=\"line\">  //目的ViewController</div><div class=\"line\">  UIViewController *toViewController = [transitionContext viewControllerForKey:UITransitionContextToViewControllerKey];</div><div class=\"line\"></div><div class=\"line\">  //起始ViewController</div><div class=\"line\">  UIViewController *fromViewController = [transitionContext viewControllerForKey:UITransitionContextFromViewControllerKey];</div><div class=\"line\"></div><div class=\"line\">  //添加toView到上下文</div><div class=\"line\">  [[transitionContext containerView] insertSubview:toViewController.view belowSubview:fromViewController.view];</div><div class=\"line\"></div><div class=\"line\">  //自定义动画</div><div class=\"line\">  toViewController.view.transform = CGAffineTransformMakeTranslation(320, 568);</div><div class=\"line\">  [UIView animateWithDuration:[self transitionDuration:transitionContext] animations:^&#123;</div><div class=\"line\"></div><div class=\"line\">    fromViewController.view.transform = CGAffineTransformMakeTranslation(-320, -568);</div><div class=\"line\">    toViewController.view.transform = CGAffineTransformIdentity;</div><div class=\"line\"></div><div class=\"line\">  &#125; completion:^(BOOL finished) &#123;</div><div class=\"line\"></div><div class=\"line\">    fromViewController.view.transform = CGAffineTransformIdentity;</div><div class=\"line\">    // 声明过渡结束时调用 completeTransition: 这个方法</div><div class=\"line\">   [transitionContext completeTransition:![transitionContext transitionWasCancelled]];</div><div class=\"line\">  &#125;];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"自定义NavigationController\"><a href=\"#自定义NavigationController\" class=\"headerlink\" title=\"自定义NavigationController\"></a>自定义NavigationController</h2><p>继承自UINavigationController类，遵守 UINavigationControllerDelegate 协议。<br>XYMPushAnmation就是前面自定义的动画类，这里要用到<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@interface RootViewController ()&lt;UINavigationControllerDelegate&gt;</div><div class=\"line\"></div><div class=\"line\">@property (nonatomic,strong)XYMPushAnmation *xymPushAnmation;</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure></p>\n<h3 id=\"m文件中创建自定义动画实例\"><a href=\"#m文件中创建自定义动画实例\" class=\"headerlink\" title=\".m文件中创建自定义动画实例\"></a>.m文件中创建自定义动画实例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (XYMPushAnmation *)xymPushAnmation</div><div class=\"line\">&#123;</div><div class=\"line\">  if (_xymPushAnmation == nil) &#123;</div><div class=\"line\">     _xymPushAnmation = [[XYMPushAnmation alloc]init];</div><div class=\"line\">  &#125;</div><div class=\"line\">  return _xymPushAnmation;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)viewDidLoad &#123;</div><div class=\"line\"></div><div class=\"line\">  self.delegate = self;</div><div class=\"line\">  _xymPushAnmation = [[XYMPushAnmation alloc] init];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"关键点：实现这一个代理方法，使用我们自定义的动画\"><a href=\"#关键点：实现这一个代理方法，使用我们自定义的动画\" class=\"headerlink\" title=\"关键点：实现这一个代理方法，使用我们自定义的动画\"></a>关键点：实现这一个代理方法，使用我们自定义的动画</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">//这个代理方法里面使用我们的自定义的动画</div><div class=\"line\">- (nullable id &lt;UIViewControllerAnimatedTransitioning&gt;)navigationController:(UINavigationController *)navigationController</div><div class=\"line\">animationControllerForOperation:(UINavigationControllerOperation)operation</div><div class=\"line\">fromViewController:(UIViewController *)fromVC</div><div class=\"line\">toViewController:(UIViewController *)toVC  NS_AVAILABLE_IOS(7_0)</div><div class=\"line\">&#123;</div><div class=\"line\">  self.xymPushAnmation.navigationController = self;      //当前这个navigationController使用这个动画</div><div class=\"line\">  self.xymPushAnmation.navigationOperation = operation;  //operation可以知道是在做push还是pop</div><div class=\"line\">  return self.xymPushAnmation;                           //使用我们的自定义动画</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p>Demo：<a href=\"https://github.com/MeXuym/PushPopAnimation\">github地址</a></p>"},{"title":"非全部导航栏显示的导航动画问题","date":"2016-12-08T15:47:44.000Z","_content":"\n![NativeNavigation](https://raw.githubusercontent.com/MeXuym/hexoSource/master/_posts/XYMNavigation/NativeNavigation.gif)\n\n项目中有一个页面为了满足设计把导航栏隐藏了，要跳转的下一界面则有导航栏，引发了如上图的问题，push和pop没有了平滑的切换动画，导航栏是突然出现和消失。做了一些尝试但始终达不到想要的效果，直到google到下面这一个解决思路。废话不多说，直入主题。\n\n## 解决思路\n1.自定义push和pop动画(点击查看我这一部分的分享)。\n2.push或者pop的同时执行我们自己的切换动画，用户看到的是我们自己的动画。\n3.手势拖动的时候，盖上自定义的UIImageView(截图View)并且跟着手势平移或者执行动画。\n<!--more-->\n\n## 自定义动画类\n\n### 自定义push、pop动画\n\n关于怎么自定义push和pop动画这一篇不再细说，这一思路也是基于自定义push和pop动画的Demo基础上对自定义动画类做改造。\n\n#### 首先给类扩充一个截图方法\n\n```\n- (UIImage *)screenShot\n{\n  UIViewController *beyondVC = self.navigationController.view.window.rootViewController;\n  CGSize size = beyondVC.view.frame.size;\n  UIGraphicsBeginImageContextWithOptions(size, YES, 0.0);\n  CGRect rect = CGRectMake(0, 0, ScreenWidth, ScreenHeight);\n  [beyondVC.view drawViewHierarchyInRect:rect  afterScreenUpdates:NO];\n  UIImage *snapshot = UIGraphicsGetImageFromCurrentImageContext();\n\n  UIGraphicsEndImageContext();\n  return snapshot;\n}\n```\n#### 改造协议方法\n\n对 -(void)animateTransition:(id)transitionContext；方法做改造\ntransitionContext这个上下文是关键，通过它我们可以拿到切换时的源控制器和目标控制器\n还有一个很重要的containerView，它是VC切换时候的view容器，即将要切入的view要加入到该view容器中。\n\n切换动画之前的准备代码：\n\n##### 1.截图\n\n```\nUIImageView * screentImgView = [[UIImageView alloc]initWithFrame:CGRectMake(0, 0, ScreenWidth, ScreenHeight)];\nUIImage * screenImg = [self screenShot];\nscreentImgView.image =screenImg;\n```\n\n##### 2.拿到切换时候的源控制器和目标控制器，以及containerView，和相关的frame\n\n```\n//取出切换的时候的源控制器和目标控制器\nUIViewController * fromViewController = [transitionContext viewControllerForKey:UITransitionContextFromViewControllerKey];\nUIViewController * toViewController = [transitionContext viewControllerForKey:UITransitionContextToViewControllerKey];\n//提供一个key，返回对应的VC,ToView对应切入的VC。\nUIView * toView = [transitionContext viewForKey:UITransitionContextToViewKey];\n//containerView是VC切换时候的view容器，将要切入的view加入到该view容器中。\nUIView * containerView = [transitionContext containerView];\n\nCGRect fromViewEndFrame = [transitionContext finalFrameForViewController:fromViewController];\nfromViewEndFrame.origin.x = ScreenWidth;\nCGRect fromViewStartFrame = fromViewEndFrame;\nCGRect toViewEndFrame = [transitionContext finalFrameForViewController:toViewController];\nCGRect toViewStartFrame = toViewEndFrame;\n```\n\n#### push动画\n\n我们要做的事情：\n1.截图加入我们的数组中\n2.将要切入的View加入到containerView\n3.截图View插入到window的atIndex:0层\n4.执行动画\n5.执行完动画移除截图View\n\n\n```\nif (self.navigationOperation == UINavigationControllerOperationPush) {\n\n[self.screenShotArray addObject:screenImg];\n//这句非常重要，没有这句，就无法正常Push和Pop出对应的界面\n[containerView addSubview:toView];\ntoView.frame = toViewStartFrame;\n\n//将截图添加到导航栏的View所属的window上\n[self.navigationController.view.window insertSubview:screentImgView atIndex:0];\nself.navigationController.view.transform = CGAffineTransformMakeTranslation(ScreenWidth, 0);\n\n//执行动画\n[UIView animateWithDuration:[self transitionDuration:transitionContext] animations:^{\n\nself.navigationController.view.transform = CGAffineTransformMakeTranslation(0, 0);\nscreentImgView.center = CGPointMake(-ScreenWidth / 2, ScreenHeight / 2);\n\n} completion:^(BOOL finished) {\n\n[screentImgView removeFromSuperview];\n[transitionContext completeTransition:YES];\n}];\n\n}\n\n```\n\n#### pop动画\n\n1.将要切入的View加入到containerView\n2.数组中最新的截图View：[self.navigationController.view.window addSubview:lastVcImgView];\n3.pop即将开始时的截图View：[self.navigationController.view addSubview:screentImgView];\n4.执行动画\n5.移除截图View,截图数组移除一个最新截图\n\n\n```\nif (self.navigationOperation == UINavigationControllerOperationPop) {\n\n   [containerView addSubview:toView];\n\n   UIImageView * lastVcImgView = [[UIImageView alloc]initWithFrame:CGRectMake(-ScreenWidth, 0, ScreenWidth, ScreenHeight)];\n   lastVcImgView.image = [self.screenShotArray lastObject];\n   screentImgView.layer.shadowColor = [UIColor blackColor].CGColor;\n   screentImgView.layer.shadowOffset = CGSizeMake(-0.8, 0);\n   screentImgView.layer.shadowOpacity = 0.6;\n   [self.navigationController.view.window addSubview:lastVcImgView];\n   [self.navigationController.view addSubview:screentImgView];\n\n   [UIView animateWithDuration:[self transitionDuration:transitionContext] animations:^{\n\n     screentImgView.center = CGPointMake(ScreenWidth * 3 / 2 , ScreenHeight / 2);\n     lastVcImgView.center = CGPointMake(ScreenWidth/2, ScreenHeight/2);\n\n   } completion:^(BOOL finished) {\n\n    [lastVcImgView removeFromSuperview];\n    [screentImgView removeFromSuperview];\n    [self.screenShotArray removeLastObject];\n    [transitionContext completeTransition:YES];  \n  }];\n}\n```\n\n#### 运行\n\n我们这时候写好一些细节就可以得到下面的效果，push和pop时执行的是我们的动画（截图的平移）。\n\n![NativeNavigation](https://raw.githubusercontent.com/MeXuym/hexoSource/master/_posts/XYMNavigation/pushandpop.gif)\n￼\n但是这时候我们还有手势返回没有实现，接下来就做这个事情。\n这要求我们对我们的自定义navigationController进行改造\n\n## 自定义navigationController\n改造这一个类的思路和前面自定义动画类做的事情差不多，差别就在于这里的截图View是跟随手势的移动来平移或执行动画\n\n### 要做的事情\n1.我们也给这个类扩充一样的截图方法，用一个数组来保存截图。\n2.根据手势的不同阶段做不同的操作或者动画（开始拖拽阶段、结束拖拽阶段、正在拖拽阶段）。\n3.push时候截图加入数组，pop的时候对移除数组最新截图。\n\n### 手势监听\n\n添加手势的一系列代码，这里不做详细解释，属于基础知识，本篇旨在解析思路和部分核心代码。\n监听手势的方法,只要是有手势就会执行\n\n```\n- (void)panGestureRec:(UIScreenEdgePanGestureRecognizer *)panGestureRec\n{\n  // 如果当前显示的控制器已经是根控制器了，不需要做任何切换动画,直接返回\n  if(self.visibleViewController == self.viewControllers[0]) return;\n\n  // 判断pan手势的各个阶段\n  switch (panGestureRec.state) {\n    case UIGestureRecognizerStateBegan:\n    // 开始拖拽阶段\n    [self dragBegin];\n    break;\n    case UIGestureRecognizerStateCancelled:\n    case UIGestureRecognizerStateFailed:\n    case UIGestureRecognizerStateEnded:\n    // 结束拖拽阶段\n    [self dragEnd];\n    break;\n    default:\n\n    // 正在拖拽阶段\n    [self dragging:panGestureRec];\n    break;\n  }\n}\n```\n\n### 拖拽开始\n\n每次开始Pan手势时,都要添加截图imageview 和 遮盖层coverView到window中\nimgView显示截图数组中的最后(最新)截图\n\n```\n- (void)dragBegin\n{\n  [self.view.window insertSubview:_screenshotImgView atIndex:0];\n  [self.view.window insertSubview:_coverView aboveSubview:_screenshotImgView];\n  _screenshotImgView.image = [_screenshotImgs lastObject];\n}\n```\n\n### 拖拽中\n\n得到手指拖动的位移，让整个截图imageview都平移\n\n```\n- (void)dragging:(UIPanGestureRecognizer *)pan\n{\n  // 得到手指拖动的位移\n  CGFloat offsetX = [pan translationInView:self.view].x;\n  // 让整个view都平移     // 挪动整个导航view\n  if (offsetX > 0) {\n     self.view.transform = CGAffineTransformMakeTranslation(offsetX, 0);\n  }\n  // 计算目前手指拖动位移占屏幕总的宽高的比例,当这个比例达到3/4时, 就让imageview完全显示，遮盖完全消失\n  double currentTranslateScaleX = offsetX/self.view.frame.size.width;\n\n  if (offsetX < ScreenWidth) {\n     _screenshotImgView.transform = CGAffineTransformMakeTranslation((offsetX - ScreenWidth) * 0.6, 0);\n  }\n  // 让遮盖透明度改变,直到减为0,让遮罩完全透明,默认的比例-(当前平衡比例/目标平衡比例)*默认的比例\n  double alpha = kDefaultAlpha - (currentTranslateScaleX/kTargetTranslateScale) * kDefaultAlpha;\n  _coverView.alpha = alpha;\n}\n```\n\n### 结束拖拽\n\n1.得到拖动的距离\n2.如果手指移动的距离还不到屏幕的一半,往左边挪 (弹回)（执行动画）\n3.如果手指移动的距离还超过了屏幕的一半,往右边挪（执行动画），执行pop操作，移除截图数组最后一张截图\n4.操作和动画执行完后都要移除截图的View\n\n```\n- (void)dragEnd\n{\n  CGFloat translateX = self.view.transform.tx;\n  CGFloat width = self.view.frame.size.width;\n  if (translateX <= 40) {\n     // 如果手指移动的距离还不到屏幕的一半,往左边挪 (弹回)\n     [UIView animateWithDuration:0.3 animations:^{\n       // 重要~~让被右移的view弹回归位,只要清空transform即可办到\n       self.view.transform = CGAffineTransformIdentity;\n       // 让imageView大小恢复默认的translation\n       _screenshotImgView.transform = CGAffineTransformMakeTranslation(-ScreenWidth, 0);\n       _coverView.alpha = kDefaultAlpha;\n\n     } completion:^(BOOL finished) {\n       [_screenshotImgView removeFromSuperview];\n       [_coverView removeFromSuperview];\n     }];\n  } else {\n\n    // 如果手指移动的距离还超过了屏幕的一半,往右边挪\n    [UIView animateWithDuration:0.3 animations:^{\n      // 让被右移的view完全挪到屏幕的最右边,结束之后,还要记得清空view的transform\n      self.view.transform = CGAffineTransformMakeTranslation(width, 0);\n      // 让imageView位移还原\n      _screenshotImgView.transform = CGAffineTransformMakeTranslation(0, 0);\n      _coverView.alpha = 0;\n  \n    } completion:^(BOOL finished) {\n      // 重要~~让被右移的view完全挪到屏幕的最右边,结束之后,还要记得清空view的transform,不然下次再次开始drag时会出问题,因为view的transform没有归零\n      self.view.transform = CGAffineTransformIdentity;\n      [_screenshotImgView removeFromSuperview];\n      [_coverView removeFromSuperview];\n      [self popViewControllerAnimated:NO];\n      [self.xymAnimation removeLastScreenShot];\n    }];\n  }\n}\n```\n\n### push和pop的时候要做的事情\n\n1.push的时候截图并保存在数组中\n2.单次pop的时候移除数组最新一张截图\n3.pop到指定的VC时移除数组对应的截图\n4.popToRootVC时移除数组所有截图\n\n```\n- (void)pushViewController:(UIViewController *)viewController animated:(BOOL)animated\n{\n  // 只有在导航控制器里面有子控制器的时候才需要截图\n  if (self.viewControllers.count >= 1) {\n    // 调用自定义方法,使用上下文截图\n    [self screenShot];\n  }\n    [super pushViewController:viewController animated:animated];\n}\n\n- (UIViewController *)popViewControllerAnimated:(BOOL)animated\n{\n  NSInteger index = self.viewControllers.count;\n  NSString * className = nil;\n  if (index >= 2) {\n    className = NSStringFromClass([self.viewControllers[index -2] class]);\n  }\n  if (_screenshotImgs.count >= index - 1) {\n    [_screenshotImgs removeLastObject];\n  }\n  return [super popViewControllerAnimated:animated];\n}\n\n- (NSArray<UIViewController *> *)popToViewController:(UIViewController *)viewController animated:(BOOL)animated\n{\n  NSInteger removeCount = 0;\n  for (NSInteger i = self.viewControllers.count - 1; i > 0; i--) {\n    if (viewController == self.viewControllers[i]) {\n      break;\n    }\n    [_screenshotImgs removeLastObject];\n    removeCount ++;\n  }\n  _animationController.removeCount = removeCount;\n  return [super popToViewController:viewController animated:animated];\n}\n\n- (NSArray<UIViewController *> *)popToRootViewControllerAnimated:(BOOL)animated\n{\n  [_screenshotImgs removeAllObjects];\n  [_animationController removeAllScreenShot];\n  return [super popToRootViewControllerAnimated:animated];\n}```\n\n\n至此，以上就是解决本篇问题的思路。没有贴出所有的代码和细节，旨在说明这一解决问题的思路\n\n![NativeNavigation](https://raw.githubusercontent.com/MeXuym/hexoSource/master/_posts/XYMNavigation/XYMNavigation.gif)\n\n## 结语\n\n这个思路把我的遇到的导航栏的问题解决了。在遇到同类问题的时候，我们同样也可以用自己的自定义转场动画代替或者覆盖掉系统的切换动画，用来规避或者隐藏掉一些问题，希望对各位有用。\n\n## Demo\nDemo：[github地址](https://github.com/MeXuym/XYMNavigationController)\n\n\n## 参考\n[【简书】让我们一次性解决导航栏的所有问题](http://www.jianshu.com/p/31f177158c9e)\n\n","source":"_posts/非全部导航栏显示的导航动画问题.md","raw":"---\ntitle: 非全部导航栏显示的导航动画问题\ndate: 2016-12-08 23:47:44\ncategories: \"iOS\"\ntags: [\"动画\",\"轮子\"]\n---\n\n![NativeNavigation](https://raw.githubusercontent.com/MeXuym/hexoSource/master/_posts/XYMNavigation/NativeNavigation.gif)\n\n项目中有一个页面为了满足设计把导航栏隐藏了，要跳转的下一界面则有导航栏，引发了如上图的问题，push和pop没有了平滑的切换动画，导航栏是突然出现和消失。做了一些尝试但始终达不到想要的效果，直到google到下面这一个解决思路。废话不多说，直入主题。\n\n## 解决思路\n1.自定义push和pop动画(点击查看我这一部分的分享)。\n2.push或者pop的同时执行我们自己的切换动画，用户看到的是我们自己的动画。\n3.手势拖动的时候，盖上自定义的UIImageView(截图View)并且跟着手势平移或者执行动画。\n<!--more-->\n\n## 自定义动画类\n\n### 自定义push、pop动画\n\n关于怎么自定义push和pop动画这一篇不再细说，这一思路也是基于自定义push和pop动画的Demo基础上对自定义动画类做改造。\n\n#### 首先给类扩充一个截图方法\n\n```\n- (UIImage *)screenShot\n{\n  UIViewController *beyondVC = self.navigationController.view.window.rootViewController;\n  CGSize size = beyondVC.view.frame.size;\n  UIGraphicsBeginImageContextWithOptions(size, YES, 0.0);\n  CGRect rect = CGRectMake(0, 0, ScreenWidth, ScreenHeight);\n  [beyondVC.view drawViewHierarchyInRect:rect  afterScreenUpdates:NO];\n  UIImage *snapshot = UIGraphicsGetImageFromCurrentImageContext();\n\n  UIGraphicsEndImageContext();\n  return snapshot;\n}\n```\n#### 改造协议方法\n\n对 -(void)animateTransition:(id)transitionContext；方法做改造\ntransitionContext这个上下文是关键，通过它我们可以拿到切换时的源控制器和目标控制器\n还有一个很重要的containerView，它是VC切换时候的view容器，即将要切入的view要加入到该view容器中。\n\n切换动画之前的准备代码：\n\n##### 1.截图\n\n```\nUIImageView * screentImgView = [[UIImageView alloc]initWithFrame:CGRectMake(0, 0, ScreenWidth, ScreenHeight)];\nUIImage * screenImg = [self screenShot];\nscreentImgView.image =screenImg;\n```\n\n##### 2.拿到切换时候的源控制器和目标控制器，以及containerView，和相关的frame\n\n```\n//取出切换的时候的源控制器和目标控制器\nUIViewController * fromViewController = [transitionContext viewControllerForKey:UITransitionContextFromViewControllerKey];\nUIViewController * toViewController = [transitionContext viewControllerForKey:UITransitionContextToViewControllerKey];\n//提供一个key，返回对应的VC,ToView对应切入的VC。\nUIView * toView = [transitionContext viewForKey:UITransitionContextToViewKey];\n//containerView是VC切换时候的view容器，将要切入的view加入到该view容器中。\nUIView * containerView = [transitionContext containerView];\n\nCGRect fromViewEndFrame = [transitionContext finalFrameForViewController:fromViewController];\nfromViewEndFrame.origin.x = ScreenWidth;\nCGRect fromViewStartFrame = fromViewEndFrame;\nCGRect toViewEndFrame = [transitionContext finalFrameForViewController:toViewController];\nCGRect toViewStartFrame = toViewEndFrame;\n```\n\n#### push动画\n\n我们要做的事情：\n1.截图加入我们的数组中\n2.将要切入的View加入到containerView\n3.截图View插入到window的atIndex:0层\n4.执行动画\n5.执行完动画移除截图View\n\n\n```\nif (self.navigationOperation == UINavigationControllerOperationPush) {\n\n[self.screenShotArray addObject:screenImg];\n//这句非常重要，没有这句，就无法正常Push和Pop出对应的界面\n[containerView addSubview:toView];\ntoView.frame = toViewStartFrame;\n\n//将截图添加到导航栏的View所属的window上\n[self.navigationController.view.window insertSubview:screentImgView atIndex:0];\nself.navigationController.view.transform = CGAffineTransformMakeTranslation(ScreenWidth, 0);\n\n//执行动画\n[UIView animateWithDuration:[self transitionDuration:transitionContext] animations:^{\n\nself.navigationController.view.transform = CGAffineTransformMakeTranslation(0, 0);\nscreentImgView.center = CGPointMake(-ScreenWidth / 2, ScreenHeight / 2);\n\n} completion:^(BOOL finished) {\n\n[screentImgView removeFromSuperview];\n[transitionContext completeTransition:YES];\n}];\n\n}\n\n```\n\n#### pop动画\n\n1.将要切入的View加入到containerView\n2.数组中最新的截图View：[self.navigationController.view.window addSubview:lastVcImgView];\n3.pop即将开始时的截图View：[self.navigationController.view addSubview:screentImgView];\n4.执行动画\n5.移除截图View,截图数组移除一个最新截图\n\n\n```\nif (self.navigationOperation == UINavigationControllerOperationPop) {\n\n   [containerView addSubview:toView];\n\n   UIImageView * lastVcImgView = [[UIImageView alloc]initWithFrame:CGRectMake(-ScreenWidth, 0, ScreenWidth, ScreenHeight)];\n   lastVcImgView.image = [self.screenShotArray lastObject];\n   screentImgView.layer.shadowColor = [UIColor blackColor].CGColor;\n   screentImgView.layer.shadowOffset = CGSizeMake(-0.8, 0);\n   screentImgView.layer.shadowOpacity = 0.6;\n   [self.navigationController.view.window addSubview:lastVcImgView];\n   [self.navigationController.view addSubview:screentImgView];\n\n   [UIView animateWithDuration:[self transitionDuration:transitionContext] animations:^{\n\n     screentImgView.center = CGPointMake(ScreenWidth * 3 / 2 , ScreenHeight / 2);\n     lastVcImgView.center = CGPointMake(ScreenWidth/2, ScreenHeight/2);\n\n   } completion:^(BOOL finished) {\n\n    [lastVcImgView removeFromSuperview];\n    [screentImgView removeFromSuperview];\n    [self.screenShotArray removeLastObject];\n    [transitionContext completeTransition:YES];  \n  }];\n}\n```\n\n#### 运行\n\n我们这时候写好一些细节就可以得到下面的效果，push和pop时执行的是我们的动画（截图的平移）。\n\n![NativeNavigation](https://raw.githubusercontent.com/MeXuym/hexoSource/master/_posts/XYMNavigation/pushandpop.gif)\n￼\n但是这时候我们还有手势返回没有实现，接下来就做这个事情。\n这要求我们对我们的自定义navigationController进行改造\n\n## 自定义navigationController\n改造这一个类的思路和前面自定义动画类做的事情差不多，差别就在于这里的截图View是跟随手势的移动来平移或执行动画\n\n### 要做的事情\n1.我们也给这个类扩充一样的截图方法，用一个数组来保存截图。\n2.根据手势的不同阶段做不同的操作或者动画（开始拖拽阶段、结束拖拽阶段、正在拖拽阶段）。\n3.push时候截图加入数组，pop的时候对移除数组最新截图。\n\n### 手势监听\n\n添加手势的一系列代码，这里不做详细解释，属于基础知识，本篇旨在解析思路和部分核心代码。\n监听手势的方法,只要是有手势就会执行\n\n```\n- (void)panGestureRec:(UIScreenEdgePanGestureRecognizer *)panGestureRec\n{\n  // 如果当前显示的控制器已经是根控制器了，不需要做任何切换动画,直接返回\n  if(self.visibleViewController == self.viewControllers[0]) return;\n\n  // 判断pan手势的各个阶段\n  switch (panGestureRec.state) {\n    case UIGestureRecognizerStateBegan:\n    // 开始拖拽阶段\n    [self dragBegin];\n    break;\n    case UIGestureRecognizerStateCancelled:\n    case UIGestureRecognizerStateFailed:\n    case UIGestureRecognizerStateEnded:\n    // 结束拖拽阶段\n    [self dragEnd];\n    break;\n    default:\n\n    // 正在拖拽阶段\n    [self dragging:panGestureRec];\n    break;\n  }\n}\n```\n\n### 拖拽开始\n\n每次开始Pan手势时,都要添加截图imageview 和 遮盖层coverView到window中\nimgView显示截图数组中的最后(最新)截图\n\n```\n- (void)dragBegin\n{\n  [self.view.window insertSubview:_screenshotImgView atIndex:0];\n  [self.view.window insertSubview:_coverView aboveSubview:_screenshotImgView];\n  _screenshotImgView.image = [_screenshotImgs lastObject];\n}\n```\n\n### 拖拽中\n\n得到手指拖动的位移，让整个截图imageview都平移\n\n```\n- (void)dragging:(UIPanGestureRecognizer *)pan\n{\n  // 得到手指拖动的位移\n  CGFloat offsetX = [pan translationInView:self.view].x;\n  // 让整个view都平移     // 挪动整个导航view\n  if (offsetX > 0) {\n     self.view.transform = CGAffineTransformMakeTranslation(offsetX, 0);\n  }\n  // 计算目前手指拖动位移占屏幕总的宽高的比例,当这个比例达到3/4时, 就让imageview完全显示，遮盖完全消失\n  double currentTranslateScaleX = offsetX/self.view.frame.size.width;\n\n  if (offsetX < ScreenWidth) {\n     _screenshotImgView.transform = CGAffineTransformMakeTranslation((offsetX - ScreenWidth) * 0.6, 0);\n  }\n  // 让遮盖透明度改变,直到减为0,让遮罩完全透明,默认的比例-(当前平衡比例/目标平衡比例)*默认的比例\n  double alpha = kDefaultAlpha - (currentTranslateScaleX/kTargetTranslateScale) * kDefaultAlpha;\n  _coverView.alpha = alpha;\n}\n```\n\n### 结束拖拽\n\n1.得到拖动的距离\n2.如果手指移动的距离还不到屏幕的一半,往左边挪 (弹回)（执行动画）\n3.如果手指移动的距离还超过了屏幕的一半,往右边挪（执行动画），执行pop操作，移除截图数组最后一张截图\n4.操作和动画执行完后都要移除截图的View\n\n```\n- (void)dragEnd\n{\n  CGFloat translateX = self.view.transform.tx;\n  CGFloat width = self.view.frame.size.width;\n  if (translateX <= 40) {\n     // 如果手指移动的距离还不到屏幕的一半,往左边挪 (弹回)\n     [UIView animateWithDuration:0.3 animations:^{\n       // 重要~~让被右移的view弹回归位,只要清空transform即可办到\n       self.view.transform = CGAffineTransformIdentity;\n       // 让imageView大小恢复默认的translation\n       _screenshotImgView.transform = CGAffineTransformMakeTranslation(-ScreenWidth, 0);\n       _coverView.alpha = kDefaultAlpha;\n\n     } completion:^(BOOL finished) {\n       [_screenshotImgView removeFromSuperview];\n       [_coverView removeFromSuperview];\n     }];\n  } else {\n\n    // 如果手指移动的距离还超过了屏幕的一半,往右边挪\n    [UIView animateWithDuration:0.3 animations:^{\n      // 让被右移的view完全挪到屏幕的最右边,结束之后,还要记得清空view的transform\n      self.view.transform = CGAffineTransformMakeTranslation(width, 0);\n      // 让imageView位移还原\n      _screenshotImgView.transform = CGAffineTransformMakeTranslation(0, 0);\n      _coverView.alpha = 0;\n  \n    } completion:^(BOOL finished) {\n      // 重要~~让被右移的view完全挪到屏幕的最右边,结束之后,还要记得清空view的transform,不然下次再次开始drag时会出问题,因为view的transform没有归零\n      self.view.transform = CGAffineTransformIdentity;\n      [_screenshotImgView removeFromSuperview];\n      [_coverView removeFromSuperview];\n      [self popViewControllerAnimated:NO];\n      [self.xymAnimation removeLastScreenShot];\n    }];\n  }\n}\n```\n\n### push和pop的时候要做的事情\n\n1.push的时候截图并保存在数组中\n2.单次pop的时候移除数组最新一张截图\n3.pop到指定的VC时移除数组对应的截图\n4.popToRootVC时移除数组所有截图\n\n```\n- (void)pushViewController:(UIViewController *)viewController animated:(BOOL)animated\n{\n  // 只有在导航控制器里面有子控制器的时候才需要截图\n  if (self.viewControllers.count >= 1) {\n    // 调用自定义方法,使用上下文截图\n    [self screenShot];\n  }\n    [super pushViewController:viewController animated:animated];\n}\n\n- (UIViewController *)popViewControllerAnimated:(BOOL)animated\n{\n  NSInteger index = self.viewControllers.count;\n  NSString * className = nil;\n  if (index >= 2) {\n    className = NSStringFromClass([self.viewControllers[index -2] class]);\n  }\n  if (_screenshotImgs.count >= index - 1) {\n    [_screenshotImgs removeLastObject];\n  }\n  return [super popViewControllerAnimated:animated];\n}\n\n- (NSArray<UIViewController *> *)popToViewController:(UIViewController *)viewController animated:(BOOL)animated\n{\n  NSInteger removeCount = 0;\n  for (NSInteger i = self.viewControllers.count - 1; i > 0; i--) {\n    if (viewController == self.viewControllers[i]) {\n      break;\n    }\n    [_screenshotImgs removeLastObject];\n    removeCount ++;\n  }\n  _animationController.removeCount = removeCount;\n  return [super popToViewController:viewController animated:animated];\n}\n\n- (NSArray<UIViewController *> *)popToRootViewControllerAnimated:(BOOL)animated\n{\n  [_screenshotImgs removeAllObjects];\n  [_animationController removeAllScreenShot];\n  return [super popToRootViewControllerAnimated:animated];\n}```\n\n\n至此，以上就是解决本篇问题的思路。没有贴出所有的代码和细节，旨在说明这一解决问题的思路\n\n![NativeNavigation](https://raw.githubusercontent.com/MeXuym/hexoSource/master/_posts/XYMNavigation/XYMNavigation.gif)\n\n## 结语\n\n这个思路把我的遇到的导航栏的问题解决了。在遇到同类问题的时候，我们同样也可以用自己的自定义转场动画代替或者覆盖掉系统的切换动画，用来规避或者隐藏掉一些问题，希望对各位有用。\n\n## Demo\nDemo：[github地址](https://github.com/MeXuym/XYMNavigationController)\n\n\n## 参考\n[【简书】让我们一次性解决导航栏的所有问题](http://www.jianshu.com/p/31f177158c9e)\n\n","slug":"非全部导航栏显示的导航动画问题","published":1,"updated":"2017-02-16T03:18:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz7u5y18000bsdsazfimzrsa","content":"<p><img src=\"https://raw.githubusercontent.com/MeXuym/hexoSource/master/_posts/XYMNavigation/NativeNavigation.gif\" alt=\"NativeNavigation\"></p>\n<p>项目中有一个页面为了满足设计把导航栏隐藏了，要跳转的下一界面则有导航栏，引发了如上图的问题，push和pop没有了平滑的切换动画，导航栏是突然出现和消失。做了一些尝试但始终达不到想要的效果，直到google到下面这一个解决思路。废话不多说，直入主题。</p>\n<h2 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h2><p>1.自定义push和pop动画(点击查看我这一部分的分享)。<br>2.push或者pop的同时执行我们自己的切换动画，用户看到的是我们自己的动画。<br>3.手势拖动的时候，盖上自定义的UIImageView(截图View)并且跟着手势平移或者执行动画。<br><a id=\"more\"></a></p>\n<h2 id=\"自定义动画类\"><a href=\"#自定义动画类\" class=\"headerlink\" title=\"自定义动画类\"></a>自定义动画类</h2><h3 id=\"自定义push、pop动画\"><a href=\"#自定义push、pop动画\" class=\"headerlink\" title=\"自定义push、pop动画\"></a>自定义push、pop动画</h3><p>关于怎么自定义push和pop动画这一篇不再细说，这一思路也是基于自定义push和pop动画的Demo基础上对自定义动画类做改造。</p>\n<h4 id=\"首先给类扩充一个截图方法\"><a href=\"#首先给类扩充一个截图方法\" class=\"headerlink\" title=\"首先给类扩充一个截图方法\"></a>首先给类扩充一个截图方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (UIImage *)screenShot</div><div class=\"line\">&#123;</div><div class=\"line\">  UIViewController *beyondVC = self.navigationController.view.window.rootViewController;</div><div class=\"line\">  CGSize size = beyondVC.view.frame.size;</div><div class=\"line\">  UIGraphicsBeginImageContextWithOptions(size, YES, 0.0);</div><div class=\"line\">  CGRect rect = CGRectMake(0, 0, ScreenWidth, ScreenHeight);</div><div class=\"line\">  [beyondVC.view drawViewHierarchyInRect:rect  afterScreenUpdates:NO];</div><div class=\"line\">  UIImage *snapshot = UIGraphicsGetImageFromCurrentImageContext();</div><div class=\"line\"></div><div class=\"line\">  UIGraphicsEndImageContext();</div><div class=\"line\">  return snapshot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"改造协议方法\"><a href=\"#改造协议方法\" class=\"headerlink\" title=\"改造协议方法\"></a>改造协议方法</h4><p>对 -(void)animateTransition:(id)transitionContext；方法做改造<br>transitionContext这个上下文是关键，通过它我们可以拿到切换时的源控制器和目标控制器<br>还有一个很重要的containerView，它是VC切换时候的view容器，即将要切入的view要加入到该view容器中。</p>\n<p>切换动画之前的准备代码：</p>\n<h5 id=\"1-截图\"><a href=\"#1-截图\" class=\"headerlink\" title=\"1.截图\"></a>1.截图</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">UIImageView * screentImgView = [[UIImageView alloc]initWithFrame:CGRectMake(0, 0, ScreenWidth, ScreenHeight)];</div><div class=\"line\">UIImage * screenImg = [self screenShot];</div><div class=\"line\">screentImgView.image =screenImg;</div></pre></td></tr></table></figure>\n<h5 id=\"2-拿到切换时候的源控制器和目标控制器，以及containerView，和相关的frame\"><a href=\"#2-拿到切换时候的源控制器和目标控制器，以及containerView，和相关的frame\" class=\"headerlink\" title=\"2.拿到切换时候的源控制器和目标控制器，以及containerView，和相关的frame\"></a>2.拿到切换时候的源控制器和目标控制器，以及containerView，和相关的frame</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">//取出切换的时候的源控制器和目标控制器</div><div class=\"line\">UIViewController * fromViewController = [transitionContext viewControllerForKey:UITransitionContextFromViewControllerKey];</div><div class=\"line\">UIViewController * toViewController = [transitionContext viewControllerForKey:UITransitionContextToViewControllerKey];</div><div class=\"line\">//提供一个key，返回对应的VC,ToView对应切入的VC。</div><div class=\"line\">UIView * toView = [transitionContext viewForKey:UITransitionContextToViewKey];</div><div class=\"line\">//containerView是VC切换时候的view容器，将要切入的view加入到该view容器中。</div><div class=\"line\">UIView * containerView = [transitionContext containerView];</div><div class=\"line\"></div><div class=\"line\">CGRect fromViewEndFrame = [transitionContext finalFrameForViewController:fromViewController];</div><div class=\"line\">fromViewEndFrame.origin.x = ScreenWidth;</div><div class=\"line\">CGRect fromViewStartFrame = fromViewEndFrame;</div><div class=\"line\">CGRect toViewEndFrame = [transitionContext finalFrameForViewController:toViewController];</div><div class=\"line\">CGRect toViewStartFrame = toViewEndFrame;</div></pre></td></tr></table></figure>\n<h4 id=\"push动画\"><a href=\"#push动画\" class=\"headerlink\" title=\"push动画\"></a>push动画</h4><p>我们要做的事情：<br>1.截图加入我们的数组中<br>2.将要切入的View加入到containerView<br>3.截图View插入到window的atIndex:0层<br>4.执行动画<br>5.执行完动画移除截图View</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (self.navigationOperation == UINavigationControllerOperationPush) &#123;</div><div class=\"line\"></div><div class=\"line\">[self.screenShotArray addObject:screenImg];</div><div class=\"line\">//这句非常重要，没有这句，就无法正常Push和Pop出对应的界面</div><div class=\"line\">[containerView addSubview:toView];</div><div class=\"line\">toView.frame = toViewStartFrame;</div><div class=\"line\"></div><div class=\"line\">//将截图添加到导航栏的View所属的window上</div><div class=\"line\">[self.navigationController.view.window insertSubview:screentImgView atIndex:0];</div><div class=\"line\">self.navigationController.view.transform = CGAffineTransformMakeTranslation(ScreenWidth, 0);</div><div class=\"line\"></div><div class=\"line\">//执行动画</div><div class=\"line\">[UIView animateWithDuration:[self transitionDuration:transitionContext] animations:^&#123;</div><div class=\"line\"></div><div class=\"line\">self.navigationController.view.transform = CGAffineTransformMakeTranslation(0, 0);</div><div class=\"line\">screentImgView.center = CGPointMake(-ScreenWidth / 2, ScreenHeight / 2);</div><div class=\"line\"></div><div class=\"line\">&#125; completion:^(BOOL finished) &#123;</div><div class=\"line\"></div><div class=\"line\">[screentImgView removeFromSuperview];</div><div class=\"line\">[transitionContext completeTransition:YES];</div><div class=\"line\">&#125;];</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"pop动画\"><a href=\"#pop动画\" class=\"headerlink\" title=\"pop动画\"></a>pop动画</h4><p>1.将要切入的View加入到containerView<br>2.数组中最新的截图View：[self.navigationController.view.window addSubview:lastVcImgView];<br>3.pop即将开始时的截图View：[self.navigationController.view addSubview:screentImgView];<br>4.执行动画<br>5.移除截图View,截图数组移除一个最新截图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (self.navigationOperation == UINavigationControllerOperationPop) &#123;</div><div class=\"line\"></div><div class=\"line\">   [containerView addSubview:toView];</div><div class=\"line\"></div><div class=\"line\">   UIImageView * lastVcImgView = [[UIImageView alloc]initWithFrame:CGRectMake(-ScreenWidth, 0, ScreenWidth, ScreenHeight)];</div><div class=\"line\">   lastVcImgView.image = [self.screenShotArray lastObject];</div><div class=\"line\">   screentImgView.layer.shadowColor = [UIColor blackColor].CGColor;</div><div class=\"line\">   screentImgView.layer.shadowOffset = CGSizeMake(-0.8, 0);</div><div class=\"line\">   screentImgView.layer.shadowOpacity = 0.6;</div><div class=\"line\">   [self.navigationController.view.window addSubview:lastVcImgView];</div><div class=\"line\">   [self.navigationController.view addSubview:screentImgView];</div><div class=\"line\"></div><div class=\"line\">   [UIView animateWithDuration:[self transitionDuration:transitionContext] animations:^&#123;</div><div class=\"line\"></div><div class=\"line\">     screentImgView.center = CGPointMake(ScreenWidth * 3 / 2 , ScreenHeight / 2);</div><div class=\"line\">     lastVcImgView.center = CGPointMake(ScreenWidth/2, ScreenHeight/2);</div><div class=\"line\"></div><div class=\"line\">   &#125; completion:^(BOOL finished) &#123;</div><div class=\"line\"></div><div class=\"line\">    [lastVcImgView removeFromSuperview];</div><div class=\"line\">    [screentImgView removeFromSuperview];</div><div class=\"line\">    [self.screenShotArray removeLastObject];</div><div class=\"line\">    [transitionContext completeTransition:YES];  </div><div class=\"line\">  &#125;];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><p>我们这时候写好一些细节就可以得到下面的效果，push和pop时执行的是我们的动画（截图的平移）。</p>\n<p><img src=\"https://raw.githubusercontent.com/MeXuym/hexoSource/master/_posts/XYMNavigation/pushandpop.gif\" alt=\"NativeNavigation\"><br>￼<br>但是这时候我们还有手势返回没有实现，接下来就做这个事情。<br>这要求我们对我们的自定义navigationController进行改造</p>\n<h2 id=\"自定义navigationController\"><a href=\"#自定义navigationController\" class=\"headerlink\" title=\"自定义navigationController\"></a>自定义navigationController</h2><p>改造这一个类的思路和前面自定义动画类做的事情差不多，差别就在于这里的截图View是跟随手势的移动来平移或执行动画</p>\n<h3 id=\"要做的事情\"><a href=\"#要做的事情\" class=\"headerlink\" title=\"要做的事情\"></a>要做的事情</h3><p>1.我们也给这个类扩充一样的截图方法，用一个数组来保存截图。<br>2.根据手势的不同阶段做不同的操作或者动画（开始拖拽阶段、结束拖拽阶段、正在拖拽阶段）。<br>3.push时候截图加入数组，pop的时候对移除数组最新截图。</p>\n<h3 id=\"手势监听\"><a href=\"#手势监听\" class=\"headerlink\" title=\"手势监听\"></a>手势监听</h3><p>添加手势的一系列代码，这里不做详细解释，属于基础知识，本篇旨在解析思路和部分核心代码。<br>监听手势的方法,只要是有手势就会执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)panGestureRec:(UIScreenEdgePanGestureRecognizer *)panGestureRec</div><div class=\"line\">&#123;</div><div class=\"line\">  // 如果当前显示的控制器已经是根控制器了，不需要做任何切换动画,直接返回</div><div class=\"line\">  if(self.visibleViewController == self.viewControllers[0]) return;</div><div class=\"line\"></div><div class=\"line\">  // 判断pan手势的各个阶段</div><div class=\"line\">  switch (panGestureRec.state) &#123;</div><div class=\"line\">    case UIGestureRecognizerStateBegan:</div><div class=\"line\">    // 开始拖拽阶段</div><div class=\"line\">    [self dragBegin];</div><div class=\"line\">    break;</div><div class=\"line\">    case UIGestureRecognizerStateCancelled:</div><div class=\"line\">    case UIGestureRecognizerStateFailed:</div><div class=\"line\">    case UIGestureRecognizerStateEnded:</div><div class=\"line\">    // 结束拖拽阶段</div><div class=\"line\">    [self dragEnd];</div><div class=\"line\">    break;</div><div class=\"line\">    default:</div><div class=\"line\"></div><div class=\"line\">    // 正在拖拽阶段</div><div class=\"line\">    [self dragging:panGestureRec];</div><div class=\"line\">    break;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"拖拽开始\"><a href=\"#拖拽开始\" class=\"headerlink\" title=\"拖拽开始\"></a>拖拽开始</h3><p>每次开始Pan手势时,都要添加截图imageview 和 遮盖层coverView到window中<br>imgView显示截图数组中的最后(最新)截图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)dragBegin</div><div class=\"line\">&#123;</div><div class=\"line\">  [self.view.window insertSubview:_screenshotImgView atIndex:0];</div><div class=\"line\">  [self.view.window insertSubview:_coverView aboveSubview:_screenshotImgView];</div><div class=\"line\">  _screenshotImgView.image = [_screenshotImgs lastObject];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"拖拽中\"><a href=\"#拖拽中\" class=\"headerlink\" title=\"拖拽中\"></a>拖拽中</h3><p>得到手指拖动的位移，让整个截图imageview都平移</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)dragging:(UIPanGestureRecognizer *)pan</div><div class=\"line\">&#123;</div><div class=\"line\">  // 得到手指拖动的位移</div><div class=\"line\">  CGFloat offsetX = [pan translationInView:self.view].x;</div><div class=\"line\">  // 让整个view都平移     // 挪动整个导航view</div><div class=\"line\">  if (offsetX &gt; 0) &#123;</div><div class=\"line\">     self.view.transform = CGAffineTransformMakeTranslation(offsetX, 0);</div><div class=\"line\">  &#125;</div><div class=\"line\">  // 计算目前手指拖动位移占屏幕总的宽高的比例,当这个比例达到3/4时, 就让imageview完全显示，遮盖完全消失</div><div class=\"line\">  double currentTranslateScaleX = offsetX/self.view.frame.size.width;</div><div class=\"line\"></div><div class=\"line\">  if (offsetX &lt; ScreenWidth) &#123;</div><div class=\"line\">     _screenshotImgView.transform = CGAffineTransformMakeTranslation((offsetX - ScreenWidth) * 0.6, 0);</div><div class=\"line\">  &#125;</div><div class=\"line\">  // 让遮盖透明度改变,直到减为0,让遮罩完全透明,默认的比例-(当前平衡比例/目标平衡比例)*默认的比例</div><div class=\"line\">  double alpha = kDefaultAlpha - (currentTranslateScaleX/kTargetTranslateScale) * kDefaultAlpha;</div><div class=\"line\">  _coverView.alpha = alpha;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"结束拖拽\"><a href=\"#结束拖拽\" class=\"headerlink\" title=\"结束拖拽\"></a>结束拖拽</h3><p>1.得到拖动的距离<br>2.如果手指移动的距离还不到屏幕的一半,往左边挪 (弹回)（执行动画）<br>3.如果手指移动的距离还超过了屏幕的一半,往右边挪（执行动画），执行pop操作，移除截图数组最后一张截图<br>4.操作和动画执行完后都要移除截图的View</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)dragEnd</div><div class=\"line\">&#123;</div><div class=\"line\">  CGFloat translateX = self.view.transform.tx;</div><div class=\"line\">  CGFloat width = self.view.frame.size.width;</div><div class=\"line\">  if (translateX &lt;= 40) &#123;</div><div class=\"line\">     // 如果手指移动的距离还不到屏幕的一半,往左边挪 (弹回)</div><div class=\"line\">     [UIView animateWithDuration:0.3 animations:^&#123;</div><div class=\"line\">       // 重要~~让被右移的view弹回归位,只要清空transform即可办到</div><div class=\"line\">       self.view.transform = CGAffineTransformIdentity;</div><div class=\"line\">       // 让imageView大小恢复默认的translation</div><div class=\"line\">       _screenshotImgView.transform = CGAffineTransformMakeTranslation(-ScreenWidth, 0);</div><div class=\"line\">       _coverView.alpha = kDefaultAlpha;</div><div class=\"line\"></div><div class=\"line\">     &#125; completion:^(BOOL finished) &#123;</div><div class=\"line\">       [_screenshotImgView removeFromSuperview];</div><div class=\"line\">       [_coverView removeFromSuperview];</div><div class=\"line\">     &#125;];</div><div class=\"line\">  &#125; else &#123;</div><div class=\"line\"></div><div class=\"line\">    // 如果手指移动的距离还超过了屏幕的一半,往右边挪</div><div class=\"line\">    [UIView animateWithDuration:0.3 animations:^&#123;</div><div class=\"line\">      // 让被右移的view完全挪到屏幕的最右边,结束之后,还要记得清空view的transform</div><div class=\"line\">      self.view.transform = CGAffineTransformMakeTranslation(width, 0);</div><div class=\"line\">      // 让imageView位移还原</div><div class=\"line\">      _screenshotImgView.transform = CGAffineTransformMakeTranslation(0, 0);</div><div class=\"line\">      _coverView.alpha = 0;</div><div class=\"line\">  </div><div class=\"line\">    &#125; completion:^(BOOL finished) &#123;</div><div class=\"line\">      // 重要~~让被右移的view完全挪到屏幕的最右边,结束之后,还要记得清空view的transform,不然下次再次开始drag时会出问题,因为view的transform没有归零</div><div class=\"line\">      self.view.transform = CGAffineTransformIdentity;</div><div class=\"line\">      [_screenshotImgView removeFromSuperview];</div><div class=\"line\">      [_coverView removeFromSuperview];</div><div class=\"line\">      [self popViewControllerAnimated:NO];</div><div class=\"line\">      [self.xymAnimation removeLastScreenShot];</div><div class=\"line\">    &#125;];</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"push和pop的时候要做的事情\"><a href=\"#push和pop的时候要做的事情\" class=\"headerlink\" title=\"push和pop的时候要做的事情\"></a>push和pop的时候要做的事情</h3><p>1.push的时候截图并保存在数组中<br>2.单次pop的时候移除数组最新一张截图<br>3.pop到指定的VC时移除数组对应的截图<br>4.popToRootVC时移除数组所有截图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)pushViewController:(UIViewController *)viewController animated:(BOOL)animated</div><div class=\"line\">&#123;</div><div class=\"line\">  // 只有在导航控制器里面有子控制器的时候才需要截图</div><div class=\"line\">  if (self.viewControllers.count &gt;= 1) &#123;</div><div class=\"line\">    // 调用自定义方法,使用上下文截图</div><div class=\"line\">    [self screenShot];</div><div class=\"line\">  &#125;</div><div class=\"line\">    [super pushViewController:viewController animated:animated];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (UIViewController *)popViewControllerAnimated:(BOOL)animated</div><div class=\"line\">&#123;</div><div class=\"line\">  NSInteger index = self.viewControllers.count;</div><div class=\"line\">  NSString * className = nil;</div><div class=\"line\">  if (index &gt;= 2) &#123;</div><div class=\"line\">    className = NSStringFromClass([self.viewControllers[index -2] class]);</div><div class=\"line\">  &#125;</div><div class=\"line\">  if (_screenshotImgs.count &gt;= index - 1) &#123;</div><div class=\"line\">    [_screenshotImgs removeLastObject];</div><div class=\"line\">  &#125;</div><div class=\"line\">  return [super popViewControllerAnimated:animated];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (NSArray&lt;UIViewController *&gt; *)popToViewController:(UIViewController *)viewController animated:(BOOL)animated</div><div class=\"line\">&#123;</div><div class=\"line\">  NSInteger removeCount = 0;</div><div class=\"line\">  for (NSInteger i = self.viewControllers.count - 1; i &gt; 0; i--) &#123;</div><div class=\"line\">    if (viewController == self.viewControllers[i]) &#123;</div><div class=\"line\">      break;</div><div class=\"line\">    &#125;</div><div class=\"line\">    [_screenshotImgs removeLastObject];</div><div class=\"line\">    removeCount ++;</div><div class=\"line\">  &#125;</div><div class=\"line\">  _animationController.removeCount = removeCount;</div><div class=\"line\">  return [super popToViewController:viewController animated:animated];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (NSArray&lt;UIViewController *&gt; *)popToRootViewControllerAnimated:(BOOL)animated</div><div class=\"line\">&#123;</div><div class=\"line\">  [_screenshotImgs removeAllObjects];</div><div class=\"line\">  [_animationController removeAllScreenShot];</div><div class=\"line\">  return [super popToRootViewControllerAnimated:animated];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>至此，以上就是解决本篇问题的思路。没有贴出所有的代码和细节，旨在说明这一解决问题的思路</p>\n<p><img src=\"https://raw.githubusercontent.com/MeXuym/hexoSource/master/_posts/XYMNavigation/XYMNavigation.gif\" alt=\"NativeNavigation\"></p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>这个思路把我的遇到的导航栏的问题解决了。在遇到同类问题的时候，我们同样也可以用自己的自定义转场动画代替或者覆盖掉系统的切换动画，用来规避或者隐藏掉一些问题，希望对各位有用。</p>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p>Demo：<a href=\"https://github.com/MeXuym/XYMNavigationController\" target=\"_blank\" rel=\"external\">github地址</a></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://www.jianshu.com/p/31f177158c9e\" target=\"_blank\" rel=\"external\">【简书】让我们一次性解决导航栏的所有问题</a></p>\n","excerpt":"<p><img src=\"https://raw.githubusercontent.com/MeXuym/hexoSource/master/_posts/XYMNavigation/NativeNavigation.gif\" alt=\"NativeNavigation\"></p>\n<p>项目中有一个页面为了满足设计把导航栏隐藏了，要跳转的下一界面则有导航栏，引发了如上图的问题，push和pop没有了平滑的切换动画，导航栏是突然出现和消失。做了一些尝试但始终达不到想要的效果，直到google到下面这一个解决思路。废话不多说，直入主题。</p>\n<h2 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h2><p>1.自定义push和pop动画(点击查看我这一部分的分享)。<br>2.push或者pop的同时执行我们自己的切换动画，用户看到的是我们自己的动画。<br>3.手势拖动的时候，盖上自定义的UIImageView(截图View)并且跟着手势平移或者执行动画。<br>","more":"</p>\n<h2 id=\"自定义动画类\"><a href=\"#自定义动画类\" class=\"headerlink\" title=\"自定义动画类\"></a>自定义动画类</h2><h3 id=\"自定义push、pop动画\"><a href=\"#自定义push、pop动画\" class=\"headerlink\" title=\"自定义push、pop动画\"></a>自定义push、pop动画</h3><p>关于怎么自定义push和pop动画这一篇不再细说，这一思路也是基于自定义push和pop动画的Demo基础上对自定义动画类做改造。</p>\n<h4 id=\"首先给类扩充一个截图方法\"><a href=\"#首先给类扩充一个截图方法\" class=\"headerlink\" title=\"首先给类扩充一个截图方法\"></a>首先给类扩充一个截图方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (UIImage *)screenShot</div><div class=\"line\">&#123;</div><div class=\"line\">  UIViewController *beyondVC = self.navigationController.view.window.rootViewController;</div><div class=\"line\">  CGSize size = beyondVC.view.frame.size;</div><div class=\"line\">  UIGraphicsBeginImageContextWithOptions(size, YES, 0.0);</div><div class=\"line\">  CGRect rect = CGRectMake(0, 0, ScreenWidth, ScreenHeight);</div><div class=\"line\">  [beyondVC.view drawViewHierarchyInRect:rect  afterScreenUpdates:NO];</div><div class=\"line\">  UIImage *snapshot = UIGraphicsGetImageFromCurrentImageContext();</div><div class=\"line\"></div><div class=\"line\">  UIGraphicsEndImageContext();</div><div class=\"line\">  return snapshot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"改造协议方法\"><a href=\"#改造协议方法\" class=\"headerlink\" title=\"改造协议方法\"></a>改造协议方法</h4><p>对 -(void)animateTransition:(id)transitionContext；方法做改造<br>transitionContext这个上下文是关键，通过它我们可以拿到切换时的源控制器和目标控制器<br>还有一个很重要的containerView，它是VC切换时候的view容器，即将要切入的view要加入到该view容器中。</p>\n<p>切换动画之前的准备代码：</p>\n<h5 id=\"1-截图\"><a href=\"#1-截图\" class=\"headerlink\" title=\"1.截图\"></a>1.截图</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">UIImageView * screentImgView = [[UIImageView alloc]initWithFrame:CGRectMake(0, 0, ScreenWidth, ScreenHeight)];</div><div class=\"line\">UIImage * screenImg = [self screenShot];</div><div class=\"line\">screentImgView.image =screenImg;</div></pre></td></tr></table></figure>\n<h5 id=\"2-拿到切换时候的源控制器和目标控制器，以及containerView，和相关的frame\"><a href=\"#2-拿到切换时候的源控制器和目标控制器，以及containerView，和相关的frame\" class=\"headerlink\" title=\"2.拿到切换时候的源控制器和目标控制器，以及containerView，和相关的frame\"></a>2.拿到切换时候的源控制器和目标控制器，以及containerView，和相关的frame</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">//取出切换的时候的源控制器和目标控制器</div><div class=\"line\">UIViewController * fromViewController = [transitionContext viewControllerForKey:UITransitionContextFromViewControllerKey];</div><div class=\"line\">UIViewController * toViewController = [transitionContext viewControllerForKey:UITransitionContextToViewControllerKey];</div><div class=\"line\">//提供一个key，返回对应的VC,ToView对应切入的VC。</div><div class=\"line\">UIView * toView = [transitionContext viewForKey:UITransitionContextToViewKey];</div><div class=\"line\">//containerView是VC切换时候的view容器，将要切入的view加入到该view容器中。</div><div class=\"line\">UIView * containerView = [transitionContext containerView];</div><div class=\"line\"></div><div class=\"line\">CGRect fromViewEndFrame = [transitionContext finalFrameForViewController:fromViewController];</div><div class=\"line\">fromViewEndFrame.origin.x = ScreenWidth;</div><div class=\"line\">CGRect fromViewStartFrame = fromViewEndFrame;</div><div class=\"line\">CGRect toViewEndFrame = [transitionContext finalFrameForViewController:toViewController];</div><div class=\"line\">CGRect toViewStartFrame = toViewEndFrame;</div></pre></td></tr></table></figure>\n<h4 id=\"push动画\"><a href=\"#push动画\" class=\"headerlink\" title=\"push动画\"></a>push动画</h4><p>我们要做的事情：<br>1.截图加入我们的数组中<br>2.将要切入的View加入到containerView<br>3.截图View插入到window的atIndex:0层<br>4.执行动画<br>5.执行完动画移除截图View</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (self.navigationOperation == UINavigationControllerOperationPush) &#123;</div><div class=\"line\"></div><div class=\"line\">[self.screenShotArray addObject:screenImg];</div><div class=\"line\">//这句非常重要，没有这句，就无法正常Push和Pop出对应的界面</div><div class=\"line\">[containerView addSubview:toView];</div><div class=\"line\">toView.frame = toViewStartFrame;</div><div class=\"line\"></div><div class=\"line\">//将截图添加到导航栏的View所属的window上</div><div class=\"line\">[self.navigationController.view.window insertSubview:screentImgView atIndex:0];</div><div class=\"line\">self.navigationController.view.transform = CGAffineTransformMakeTranslation(ScreenWidth, 0);</div><div class=\"line\"></div><div class=\"line\">//执行动画</div><div class=\"line\">[UIView animateWithDuration:[self transitionDuration:transitionContext] animations:^&#123;</div><div class=\"line\"></div><div class=\"line\">self.navigationController.view.transform = CGAffineTransformMakeTranslation(0, 0);</div><div class=\"line\">screentImgView.center = CGPointMake(-ScreenWidth / 2, ScreenHeight / 2);</div><div class=\"line\"></div><div class=\"line\">&#125; completion:^(BOOL finished) &#123;</div><div class=\"line\"></div><div class=\"line\">[screentImgView removeFromSuperview];</div><div class=\"line\">[transitionContext completeTransition:YES];</div><div class=\"line\">&#125;];</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"pop动画\"><a href=\"#pop动画\" class=\"headerlink\" title=\"pop动画\"></a>pop动画</h4><p>1.将要切入的View加入到containerView<br>2.数组中最新的截图View：[self.navigationController.view.window addSubview:lastVcImgView];<br>3.pop即将开始时的截图View：[self.navigationController.view addSubview:screentImgView];<br>4.执行动画<br>5.移除截图View,截图数组移除一个最新截图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (self.navigationOperation == UINavigationControllerOperationPop) &#123;</div><div class=\"line\"></div><div class=\"line\">   [containerView addSubview:toView];</div><div class=\"line\"></div><div class=\"line\">   UIImageView * lastVcImgView = [[UIImageView alloc]initWithFrame:CGRectMake(-ScreenWidth, 0, ScreenWidth, ScreenHeight)];</div><div class=\"line\">   lastVcImgView.image = [self.screenShotArray lastObject];</div><div class=\"line\">   screentImgView.layer.shadowColor = [UIColor blackColor].CGColor;</div><div class=\"line\">   screentImgView.layer.shadowOffset = CGSizeMake(-0.8, 0);</div><div class=\"line\">   screentImgView.layer.shadowOpacity = 0.6;</div><div class=\"line\">   [self.navigationController.view.window addSubview:lastVcImgView];</div><div class=\"line\">   [self.navigationController.view addSubview:screentImgView];</div><div class=\"line\"></div><div class=\"line\">   [UIView animateWithDuration:[self transitionDuration:transitionContext] animations:^&#123;</div><div class=\"line\"></div><div class=\"line\">     screentImgView.center = CGPointMake(ScreenWidth * 3 / 2 , ScreenHeight / 2);</div><div class=\"line\">     lastVcImgView.center = CGPointMake(ScreenWidth/2, ScreenHeight/2);</div><div class=\"line\"></div><div class=\"line\">   &#125; completion:^(BOOL finished) &#123;</div><div class=\"line\"></div><div class=\"line\">    [lastVcImgView removeFromSuperview];</div><div class=\"line\">    [screentImgView removeFromSuperview];</div><div class=\"line\">    [self.screenShotArray removeLastObject];</div><div class=\"line\">    [transitionContext completeTransition:YES];  </div><div class=\"line\">  &#125;];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><p>我们这时候写好一些细节就可以得到下面的效果，push和pop时执行的是我们的动画（截图的平移）。</p>\n<p><img src=\"https://raw.githubusercontent.com/MeXuym/hexoSource/master/_posts/XYMNavigation/pushandpop.gif\" alt=\"NativeNavigation\"><br>￼<br>但是这时候我们还有手势返回没有实现，接下来就做这个事情。<br>这要求我们对我们的自定义navigationController进行改造</p>\n<h2 id=\"自定义navigationController\"><a href=\"#自定义navigationController\" class=\"headerlink\" title=\"自定义navigationController\"></a>自定义navigationController</h2><p>改造这一个类的思路和前面自定义动画类做的事情差不多，差别就在于这里的截图View是跟随手势的移动来平移或执行动画</p>\n<h3 id=\"要做的事情\"><a href=\"#要做的事情\" class=\"headerlink\" title=\"要做的事情\"></a>要做的事情</h3><p>1.我们也给这个类扩充一样的截图方法，用一个数组来保存截图。<br>2.根据手势的不同阶段做不同的操作或者动画（开始拖拽阶段、结束拖拽阶段、正在拖拽阶段）。<br>3.push时候截图加入数组，pop的时候对移除数组最新截图。</p>\n<h3 id=\"手势监听\"><a href=\"#手势监听\" class=\"headerlink\" title=\"手势监听\"></a>手势监听</h3><p>添加手势的一系列代码，这里不做详细解释，属于基础知识，本篇旨在解析思路和部分核心代码。<br>监听手势的方法,只要是有手势就会执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)panGestureRec:(UIScreenEdgePanGestureRecognizer *)panGestureRec</div><div class=\"line\">&#123;</div><div class=\"line\">  // 如果当前显示的控制器已经是根控制器了，不需要做任何切换动画,直接返回</div><div class=\"line\">  if(self.visibleViewController == self.viewControllers[0]) return;</div><div class=\"line\"></div><div class=\"line\">  // 判断pan手势的各个阶段</div><div class=\"line\">  switch (panGestureRec.state) &#123;</div><div class=\"line\">    case UIGestureRecognizerStateBegan:</div><div class=\"line\">    // 开始拖拽阶段</div><div class=\"line\">    [self dragBegin];</div><div class=\"line\">    break;</div><div class=\"line\">    case UIGestureRecognizerStateCancelled:</div><div class=\"line\">    case UIGestureRecognizerStateFailed:</div><div class=\"line\">    case UIGestureRecognizerStateEnded:</div><div class=\"line\">    // 结束拖拽阶段</div><div class=\"line\">    [self dragEnd];</div><div class=\"line\">    break;</div><div class=\"line\">    default:</div><div class=\"line\"></div><div class=\"line\">    // 正在拖拽阶段</div><div class=\"line\">    [self dragging:panGestureRec];</div><div class=\"line\">    break;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"拖拽开始\"><a href=\"#拖拽开始\" class=\"headerlink\" title=\"拖拽开始\"></a>拖拽开始</h3><p>每次开始Pan手势时,都要添加截图imageview 和 遮盖层coverView到window中<br>imgView显示截图数组中的最后(最新)截图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)dragBegin</div><div class=\"line\">&#123;</div><div class=\"line\">  [self.view.window insertSubview:_screenshotImgView atIndex:0];</div><div class=\"line\">  [self.view.window insertSubview:_coverView aboveSubview:_screenshotImgView];</div><div class=\"line\">  _screenshotImgView.image = [_screenshotImgs lastObject];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"拖拽中\"><a href=\"#拖拽中\" class=\"headerlink\" title=\"拖拽中\"></a>拖拽中</h3><p>得到手指拖动的位移，让整个截图imageview都平移</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)dragging:(UIPanGestureRecognizer *)pan</div><div class=\"line\">&#123;</div><div class=\"line\">  // 得到手指拖动的位移</div><div class=\"line\">  CGFloat offsetX = [pan translationInView:self.view].x;</div><div class=\"line\">  // 让整个view都平移     // 挪动整个导航view</div><div class=\"line\">  if (offsetX &gt; 0) &#123;</div><div class=\"line\">     self.view.transform = CGAffineTransformMakeTranslation(offsetX, 0);</div><div class=\"line\">  &#125;</div><div class=\"line\">  // 计算目前手指拖动位移占屏幕总的宽高的比例,当这个比例达到3/4时, 就让imageview完全显示，遮盖完全消失</div><div class=\"line\">  double currentTranslateScaleX = offsetX/self.view.frame.size.width;</div><div class=\"line\"></div><div class=\"line\">  if (offsetX &lt; ScreenWidth) &#123;</div><div class=\"line\">     _screenshotImgView.transform = CGAffineTransformMakeTranslation((offsetX - ScreenWidth) * 0.6, 0);</div><div class=\"line\">  &#125;</div><div class=\"line\">  // 让遮盖透明度改变,直到减为0,让遮罩完全透明,默认的比例-(当前平衡比例/目标平衡比例)*默认的比例</div><div class=\"line\">  double alpha = kDefaultAlpha - (currentTranslateScaleX/kTargetTranslateScale) * kDefaultAlpha;</div><div class=\"line\">  _coverView.alpha = alpha;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"结束拖拽\"><a href=\"#结束拖拽\" class=\"headerlink\" title=\"结束拖拽\"></a>结束拖拽</h3><p>1.得到拖动的距离<br>2.如果手指移动的距离还不到屏幕的一半,往左边挪 (弹回)（执行动画）<br>3.如果手指移动的距离还超过了屏幕的一半,往右边挪（执行动画），执行pop操作，移除截图数组最后一张截图<br>4.操作和动画执行完后都要移除截图的View</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)dragEnd</div><div class=\"line\">&#123;</div><div class=\"line\">  CGFloat translateX = self.view.transform.tx;</div><div class=\"line\">  CGFloat width = self.view.frame.size.width;</div><div class=\"line\">  if (translateX &lt;= 40) &#123;</div><div class=\"line\">     // 如果手指移动的距离还不到屏幕的一半,往左边挪 (弹回)</div><div class=\"line\">     [UIView animateWithDuration:0.3 animations:^&#123;</div><div class=\"line\">       // 重要~~让被右移的view弹回归位,只要清空transform即可办到</div><div class=\"line\">       self.view.transform = CGAffineTransformIdentity;</div><div class=\"line\">       // 让imageView大小恢复默认的translation</div><div class=\"line\">       _screenshotImgView.transform = CGAffineTransformMakeTranslation(-ScreenWidth, 0);</div><div class=\"line\">       _coverView.alpha = kDefaultAlpha;</div><div class=\"line\"></div><div class=\"line\">     &#125; completion:^(BOOL finished) &#123;</div><div class=\"line\">       [_screenshotImgView removeFromSuperview];</div><div class=\"line\">       [_coverView removeFromSuperview];</div><div class=\"line\">     &#125;];</div><div class=\"line\">  &#125; else &#123;</div><div class=\"line\"></div><div class=\"line\">    // 如果手指移动的距离还超过了屏幕的一半,往右边挪</div><div class=\"line\">    [UIView animateWithDuration:0.3 animations:^&#123;</div><div class=\"line\">      // 让被右移的view完全挪到屏幕的最右边,结束之后,还要记得清空view的transform</div><div class=\"line\">      self.view.transform = CGAffineTransformMakeTranslation(width, 0);</div><div class=\"line\">      // 让imageView位移还原</div><div class=\"line\">      _screenshotImgView.transform = CGAffineTransformMakeTranslation(0, 0);</div><div class=\"line\">      _coverView.alpha = 0;</div><div class=\"line\">  </div><div class=\"line\">    &#125; completion:^(BOOL finished) &#123;</div><div class=\"line\">      // 重要~~让被右移的view完全挪到屏幕的最右边,结束之后,还要记得清空view的transform,不然下次再次开始drag时会出问题,因为view的transform没有归零</div><div class=\"line\">      self.view.transform = CGAffineTransformIdentity;</div><div class=\"line\">      [_screenshotImgView removeFromSuperview];</div><div class=\"line\">      [_coverView removeFromSuperview];</div><div class=\"line\">      [self popViewControllerAnimated:NO];</div><div class=\"line\">      [self.xymAnimation removeLastScreenShot];</div><div class=\"line\">    &#125;];</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"push和pop的时候要做的事情\"><a href=\"#push和pop的时候要做的事情\" class=\"headerlink\" title=\"push和pop的时候要做的事情\"></a>push和pop的时候要做的事情</h3><p>1.push的时候截图并保存在数组中<br>2.单次pop的时候移除数组最新一张截图<br>3.pop到指定的VC时移除数组对应的截图<br>4.popToRootVC时移除数组所有截图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)pushViewController:(UIViewController *)viewController animated:(BOOL)animated</div><div class=\"line\">&#123;</div><div class=\"line\">  // 只有在导航控制器里面有子控制器的时候才需要截图</div><div class=\"line\">  if (self.viewControllers.count &gt;= 1) &#123;</div><div class=\"line\">    // 调用自定义方法,使用上下文截图</div><div class=\"line\">    [self screenShot];</div><div class=\"line\">  &#125;</div><div class=\"line\">    [super pushViewController:viewController animated:animated];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (UIViewController *)popViewControllerAnimated:(BOOL)animated</div><div class=\"line\">&#123;</div><div class=\"line\">  NSInteger index = self.viewControllers.count;</div><div class=\"line\">  NSString * className = nil;</div><div class=\"line\">  if (index &gt;= 2) &#123;</div><div class=\"line\">    className = NSStringFromClass([self.viewControllers[index -2] class]);</div><div class=\"line\">  &#125;</div><div class=\"line\">  if (_screenshotImgs.count &gt;= index - 1) &#123;</div><div class=\"line\">    [_screenshotImgs removeLastObject];</div><div class=\"line\">  &#125;</div><div class=\"line\">  return [super popViewControllerAnimated:animated];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (NSArray&lt;UIViewController *&gt; *)popToViewController:(UIViewController *)viewController animated:(BOOL)animated</div><div class=\"line\">&#123;</div><div class=\"line\">  NSInteger removeCount = 0;</div><div class=\"line\">  for (NSInteger i = self.viewControllers.count - 1; i &gt; 0; i--) &#123;</div><div class=\"line\">    if (viewController == self.viewControllers[i]) &#123;</div><div class=\"line\">      break;</div><div class=\"line\">    &#125;</div><div class=\"line\">    [_screenshotImgs removeLastObject];</div><div class=\"line\">    removeCount ++;</div><div class=\"line\">  &#125;</div><div class=\"line\">  _animationController.removeCount = removeCount;</div><div class=\"line\">  return [super popToViewController:viewController animated:animated];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (NSArray&lt;UIViewController *&gt; *)popToRootViewControllerAnimated:(BOOL)animated</div><div class=\"line\">&#123;</div><div class=\"line\">  [_screenshotImgs removeAllObjects];</div><div class=\"line\">  [_animationController removeAllScreenShot];</div><div class=\"line\">  return [super popToRootViewControllerAnimated:animated];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>至此，以上就是解决本篇问题的思路。没有贴出所有的代码和细节，旨在说明这一解决问题的思路</p>\n<p><img src=\"https://raw.githubusercontent.com/MeXuym/hexoSource/master/_posts/XYMNavigation/XYMNavigation.gif\" alt=\"NativeNavigation\"></p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>这个思路把我的遇到的导航栏的问题解决了。在遇到同类问题的时候，我们同样也可以用自己的自定义转场动画代替或者覆盖掉系统的切换动画，用来规避或者隐藏掉一些问题，希望对各位有用。</p>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p>Demo：<a href=\"https://github.com/MeXuym/XYMNavigationController\">github地址</a></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://www.jianshu.com/p/31f177158c9e\">【简书】让我们一次性解决导航栏的所有问题</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ciz7u5y130006sdsaaz8a4enf","category_id":"ciz7u5y0w0003sdsar4pnjrbp","_id":"ciz7u5y19000csdsafwvd77vv"},{"post_id":"ciz7u5y0n0000sdsabvvkxi08","category_id":"ciz7u5y0w0003sdsar4pnjrbp","_id":"ciz7u5y1e000gsdsaywl04rho"},{"post_id":"ciz7u5y140007sdsa2wp8u0di","category_id":"ciz7u5y0w0003sdsar4pnjrbp","_id":"ciz7u5y1f000isdsa788a7a9e"},{"post_id":"ciz7u5y18000bsdsazfimzrsa","category_id":"ciz7u5y0w0003sdsar4pnjrbp","_id":"ciz7u5y1g000ksdsay38cipz9"},{"post_id":"ciz7u5y0t0002sdsay4b4ffn8","category_id":"ciz7u5y0w0003sdsar4pnjrbp","_id":"ciz7u5y1g000msdsaznrl766m"},{"post_id":"ciz7u5y0z0005sdsad6px1302","category_id":"ciz7u5y1b000esdsa6z1eh769","_id":"ciz7u5y1g000osdsaterbkflt"}],"PostTag":[{"post_id":"ciz7u5y130006sdsaaz8a4enf","tag_id":"ciz7u5y0z0004sdsa1z8dey4o","_id":"ciz7u5y17000asdsaqazgh0yp"},{"post_id":"ciz7u5y0n0000sdsabvvkxi08","tag_id":"ciz7u5y0z0004sdsa1z8dey4o","_id":"ciz7u5y19000dsdsahs62wqsh"},{"post_id":"ciz7u5y0t0002sdsay4b4ffn8","tag_id":"ciz7u5y0z0004sdsa1z8dey4o","_id":"ciz7u5y1f000hsdsars2v2skt"},{"post_id":"ciz7u5y0z0005sdsad6px1302","tag_id":"ciz7u5y1c000fsdsa03p2etrd","_id":"ciz7u5y1g000lsdsavbij0ex1"},{"post_id":"ciz7u5y140007sdsa2wp8u0di","tag_id":"ciz7u5y1g000jsdsa1bavd38n","_id":"ciz7u5y1h000psdsa7sz2g7h3"},{"post_id":"ciz7u5y18000bsdsazfimzrsa","tag_id":"ciz7u5y1g000jsdsa1bavd38n","_id":"ciz7u5y1h000qsdsapxj4qhvq"},{"post_id":"ciz7u5y18000bsdsazfimzrsa","tag_id":"ciz7u5y0z0004sdsa1z8dey4o","_id":"ciz7u5y1h000rsdsan5jvf42l"}],"Tag":[{"name":"轮子","_id":"ciz7u5y0z0004sdsa1z8dey4o"},{"name":"炒","_id":"ciz7u5y1c000fsdsa03p2etrd"},{"name":"动画","_id":"ciz7u5y1g000jsdsa1bavd38n"}]}}